

{{ $auth_rootpath := printf "%s%s" .Values.rootPath "/rootfs/auth" }}
{{- $auth_secret := (lookup "v1" "Secret" .Release.Namespace "authelia-secrets") -}}
{{- $jwt_secret := "" -}}
{{- $session_secret := "" -}}
{{- $hmac_secret := "" -}}
{{- $encryption_key := "" -}}
{{- $redis_password := "" -}}
{{- $pg_password := "" -}}
{{- $nats_password := "" -}}
{{ if $auth_secret -}}
{{- $jwt_secret = (index $auth_secret "data" "jwt_secret") -}}
{{- $session_secret = (index $auth_secret "data" "session_secret") -}}
{{- $hmac_secret = (index $auth_secret "data" "hmac_secret") -}}
{{- $encryption_key = (index $auth_secret "data" "encryption_key") -}}
{{- $redis_password = (index $auth_secret "data" "redis_password") -}}
{{- $pg_password = (index $auth_secret "data" "pg_password") -}}
{{- $nats_password = (index $auth_secret "data" "nats_password") -}}

{{ else -}}
{{ $jwt_secret = randAlphaNum 16 | b64enc }}
{{ $session_secret = randAlphaNum 16 | b64enc }}
{{ $hmac_secret = randAlphaNum 16 | b64enc }}
{{ $encryption_key = randAlphaNum 32 | b64enc }}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: authelia-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  jwt_secret: {{ $jwt_secret }}
  session_secret: {{ $session_secret }}
  hmac_secret: {{ $hmac_secret }}
  encryption_key: {{ $encryption_key }}
  redis_password: {{ $redis_password }}
  pg_password: {{ $pg_password }}
  nats_password: {{ $nats_password }}


---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-pg
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: authelia_os_framework
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: authelia-secrets
    databases:
      - name: authelia

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-nats
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: authelia-secrets
    refs:
    - appName: user-service
      appNamespace: os
      subjects:
      - name: "notification.*"
        perm:
        - pub
        - sub
    - appName: notifications
      appNamespace: os
      subjects:
        - name: "users.*"
          perm:
            - pub
            - sub
    user: os-authelia

---
apiVersion: v1
data:
  configuration.yaml: |
    jwt_secret: {{ $jwt_secret | b64dec }}
    default_redirection_url: /

    server:
      host: 0.0.0.0
      port: 9091
      buffers:
        read: 10240

    log:
      level: debug

    totp:
      issuer: terminus.os

    # duo_api:
    #  hostname: api-123456789.example.com
    #  integration_key: ABCDEF
    #  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
    #  secret_key: 1234567890abcdefghifjkl

    # authentication_backend:
    #   file:
    #     path: /config/users_database.yml
    authentication_backend:
      password_reset:
        disable: false
      refresh_interval: 5m
      lldap:
        implementation: custom
        url: ldap://lldap-service.os-platform:3890
        timeout: 5s
        start_tls: false
        base_dn: dc=example,dc=com
        additional_users_dn: ou=users
        users_filter: (&({username_attribute}={input})(objectClass=person))
        additional_groups_dn: ou=groups
        groups_filter: "(member={dn})"
        group_name_attribute: cn
        mail_attribute: mail
        display_name_attribute: displayName
        username_attribute: uid
        server: lldap-service.os-platform
        port: 17170
        user: cn=admin,dc=example,dc=com
        password: adminpassword

    access_control:
      config_type: terminus
      default_policy: deny
      rules:
        # Rules applied to everyone
        - domain: example.myterminus.com
          policy: one_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']
        - domain: 'files.example.myterminus.com'
          policy: two_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']

    session:
      # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
      secret: {{ $session_secret | b64dec }}
      name: authelia_session
      same_site: 'none'

      # expiration: 1209600  # probably nanosecond
      # inactivity: 1209600  # 5 minutes
      cookies:
        - domain: 'example.com'
          authelia_url: https://authelia-svc.example.com/

    regulation:
      max_retries: 3
      find_time: 120
      ban_time: 300

    storage:
      encryption_key: {{ $encryption_key | b64dec }}
      postgres:
        host: citus-headless.os-platform
        port: 5432
        database: os_framework_authelia
        schema: public
        username: authelia_os_framework
        password: {{ $pg_password | b64dec }}
        timeout: 5s
        
    notifier:
      disable_startup_check: false
      filesystem:
        filename: /app/notification.txt
    identity_providers:
      oidc:
        hmac_secret: {{ $hmac_secret | b64dec }}
        issuer_certificate_chain: |
          -----BEGIN CERTIFICATE-----
          MIIDDzCCAfegAwIBAgIUBhJ1S1VS919VJBEyBO6f2802FacwDQYJKoZIhvcNAQEL
          BQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wIBcNMjUwNzA0MTMxNjU1WhgPMjA1
          NTA2MjcxMzE2NTVaMBYxFDASBgNVBAMMC2V4YW1wbGUuY29tMIIBIjANBgkqhkiG
          9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxK9vLOCiQWoBCiJNwBlbNiF7ULAIbiDKiTTW
          63+Zn2hgHsPrwaQId2MQTqUgmjn3Thd1+6WceGcqI8/HFqCOAE+Dgoe6Qeaonij4
          hjtEw63IiCdwMxsrn3/hAu6HT07rfz01DrbGcIVwDvk1PoM+8otvDEuk14q10uD3
          pWryrE0WIBhMOBNl4uXbKzL3OX/acbndDV4cUm7yIIDbHTrxNduqR9gjRby8Xuww
          DvVRi6vH0nTvzvwT1ebVCqXfuGUQywV19MnLOPPGLNXA4clEz29THwOrH2QkqFAv
          EV6aZ0MKXc05ELNEp5M0VKkEMhByNRMWLPvBDyRzWB2KYz/cOQIDAQABo1MwUTAd
          BgNVHQ4EFgQUiKteTSn8WhSWrMGlnzAjBRqFFhAwHwYDVR0jBBgwFoAUiKteTSn8
          WhSWrMGlnzAjBRqFFhAwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOC
          AQEAf7zh+woNHe9J68mrbhGprQ9hdJldyKdpIk0STuvKEWO9WmvpU/GfCKX3/fI4
          jkvPdlNVaWBb9jjujFzHEvJrV6zJiezVgzl9bNi11y9O08eH7IzX7c766bmXHgKx
          xQHgEcH5VQbitI/XdShkN0y2GGbt24VDYFp4zDqeZh0IbO+VNWIBBe8mwZkxVGij
          aIulU9y39dOzqJNlvzaRUZeP6sykXbKtimBppRZ9D3VxRuxXRnM0cBvR3kIQeN0p
          frkMbSJJV+mZr1axhzXGojrEnuTweq8w330/gCpRuQLKX24dnNwBEY0bRnpgVDkA
          kaNoffIKQmQGuwQjPGLlAlKt/A==
          -----END CERTIFICATE-----
        issuer_private_key: |
          -----BEGIN PRIVATE KEY-----
          MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDEr28s4KJBagEK
          Ik3AGVs2IXtQsAhuIMqJNNbrf5mfaGAew+vBpAh3YxBOpSCaOfdOF3X7pZx4Zyoj
          z8cWoI4AT4OCh7pB5qieKPiGO0TDrciIJ3AzGyuff+EC7odPTut/PTUOtsZwhXAO
          +TU+gz7yi28MS6TXirXS4PelavKsTRYgGEw4E2Xi5dsrMvc5f9pxud0NXhxSbvIg
          gNsdOvE126pH2CNFvLxe7DAO9VGLq8fSdO/O/BPV5tUKpd+4ZRDLBXX0ycs488Ys
          1cDhyUTPb1MfA6sfZCSoUC8RXppnQwpdzTkQs0SnkzRUqQQyEHI1ExYs+8EPJHNY
          HYpjP9w5AgMBAAECggEBAIhS0EvappuQTYgonps29/Fc44vZdv5d3AOdjBlOJ7xF
          K9onEZD1kKivEO5xpVdANhj6SdxRvVH2r06DBQq53bJ5aj1etcpXhSeaXicrjU3T
          ddpo+2twuZujluHhUge2O6PFWLEKHiB/XFwEftMFROv3mNB83ZRHoB65ruwIZIrm
          6/5mZm6kdZlZkJxqDHZMk5rtU9ssyrfXokVZSV7qiHPmKWYCCoMit/X95gaFoXOI
          02nxo2R88b234xKySvpRm4mzZwfobCgFpd8cEiU23e9ezF0au9pSHkikdm5yvNj/
          TK7oqXnaySQzzSqXs+sAQf+2yaSFBLFENHC61beA3wECgYEA5SxFJhkS7MeEktiu
          0TrbrTP4/gyBWhdmwkbhac0Z06C25vRq5gQE9EG2LT5xnosMmcBdMXhlLp0hTQv9
          pXMZrRlgUzuE1xk+757Rpb8dzkQfqgX8y7vGmPK1SsUBQz/cXHsbOXI/mW6mUeD0
          DW7FuX129nZYTACO5RXOphA5j7UCgYEA27WXm5ZrTb8MSKY5+f0OtHU0TIPhJNpx
          ocFNH0zFXlXZqhlhmqV24pNk7FYsulhNQ5s3f9BpJI2R252C0bCHaU+iJ+PVejU/
          Wua8JCU75t000Cpj4VgsyBB7yZc/Eael8smY4h5K5Nkt5CyfmfXD1xsFTXUXL9vy
          fdHd9Z/QhPUCgYEAjir4ernzU5AyXiatzH6G6NvlCzUWyZza0orGK6xg6Tg6PuxB
          pI+5ww1AxrCGK6R3HKqJJbdajaBMmE9n+st8kjW72+aAci/nKx+LTxdQljUMr50n
          RfwnJ5rpfIjaT62+NmDocqq9aaGK7CBxRiQB5SBAPIUOIZf3DYaJu9s02kECgYAT
          4iQ9TWiamZ6X+Isop5EsHatE/W5jsm00MVU0bvMxrV1Meo2NvEm9CY/Jn6beml0r
          sCFerNLHHxTDJkcPiQVIL4/CQmkwbR81r8n5D3GTXBOKfzuYyi0LUgqR3OE1TNHE
          3h+63vjyKwFvM+ahvU8i6WwabW1SxHn2jwaiUvtA/QKBgDOoTGaWP0qvU8P5UEBL
          o8P6MUYJzk49cjkUoQ/6m625FcBjVXS5q8jahgCnojaCARxJYb6f15znwatee8Ny
          c+TT13PF9XcTIGtl8BY7Uno70k3/W9G2zqme23L3lyHdk+FPLguCRPTktQmRXe4e
          97O7VwoARsi1FzQlWVkZybP5
          -----END PRIVATE KEY-----
        access_token_lifespan: 1h
        authorize_code_lifespan: 1m
        id_token_lifespan: 1h
        refresh_token_lifespan: 90m
        enable_client_debug_messages: false
        enforce_pkce: public_clients_only
        cors:
          endpoints:
            - authorization
            - token
            - revocation
            - introspection
        clients:
          - id: example
            description: example
            secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.
            sector_identifier: ''
            public: false
            authorization_policy: two_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1w
            audience: []
            scopes:
              - openid
              - groups
              - email
              - profile
            redirect_uris:
              - https://www.example.com/auth/auth/openid_connect/callback
            grant_types:
              - refresh_token
              - authorization_code
            response_types:
              - code
            response_modes:
              - form_post
              - query
              - fragment
            userinfo_signing_algorithm: none
  # users_database.yaml: |
  #   users:
  #     authelia:
  #       disabled: false
  #       displayname: "Authelia User"
  #       # Password is authelia
  #       password: "$6$rounds=50000$BpLnfgDsc2WD8F2q$Zis.ixdg9s/UOJYrs56b5QEZFiZECu0qZVNsIYxBaNJ7ucIL.nlxVCT5tqh8KHG8X4tlwCFm5r6NTOZZ5qRFN/"  # yamllint disable-line rule:line-length
  #       email: authelia@authelia.com
  #       groups:
  #         - admins
  #         - dev

kind: ConfigMap
metadata:
  name: authelia-configs
  namespace: {{ .Release.Namespace }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: authelia-backend
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authelia-backend
  template:
    metadata:
      labels:
        app: authelia-backend
    spec:
      serviceAccountName: os-internal
      serviceAccount: os-internal
      priorityClassName: "system-cluster-critical"
      initContainers:
      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment";
            until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1";
            do sleep 1; printf "-"; done; sleep 15;
            echo -e " >> $PGDB exists";
        env:
          - name: PGHOST
            value: citus-headless.os-platform
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: authelia_os_framework
          - name: PGPASSWORD
            value: {{ $pg_password | b64dec }}
          - name: PGDB
            value: os_framework_authelia
      - name: setsysctl
        image: 'busybox:1.28'
        command:
          - sh
          - '-c'
          - |
            sysctl -w net.core.somaxconn=65535
            sysctl -w net.ipv4.ip_local_port_range="1024 65535"
            sysctl -w net.ipv4.tcp_tw_reuse=1
            sysctl -w fs.file-max=1048576
        securityContext:
          privileged: true
      containers:      
      - name: authelia
        image: beclab/auth:0.2.12
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        env:
        - name: TZ
          value: UTC
        - name: APP_RANDOM_KEY
          valueFrom:
            secretKeyRef:
              name: app-key
              key: random-key
        - name: NATS_HOST
          value: nats.os-platform
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: os-authelia
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: nats_password
              name: authelia-secrets
        - name: NATS_SUBJECT
          value: "os.notification"
        - name: NATS_SUBJECT_FOR_USERS
          value: "os.users"

        volumeMounts:
        - name: config
          mountPath: /app/configuration.yml
          subPath: configuration.yaml
        - name: data
          mountPath: /config

      volumes:
      - name: config
        configMap:
          name: authelia-configs
          defaultMode: 438
          items:
          - key: configuration.yaml
            path: configuration.yaml
      - name: data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $auth_rootpath }}'

---
apiVersion: v1
kind: Service
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: authelia-backend
  type: ClusterIP
  ports:
    - protocol: TCP
      name: authelia
      port: 9091
      targetPort: 9091
