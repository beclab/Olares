
{{- $mongo_secret := (lookup "v1" "Secret" .Release.Namespace "mdb-cluster-name-secrets") -}}
{{ $mongo_rootpath := "/terminus/userdata/dbdata" }}
{{ $mongo_backuppath := "/terminus/rootfs/middleware-backup" }}


---
apiVersion: v1
kind: Secret
metadata:
  name: mdb-cluster-name-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
{{ if $mongo_secret -}}
data:
  MONGODB_BACKUP_USER: {{ index $mongo_secret "data" "MONGODB_BACKUP_USER" }}
  MONGODB_BACKUP_PASSWORD: {{ index $mongo_secret "data" "MONGODB_BACKUP_PASSWORD" }}
  MONGODB_DATABASE_ADMIN_USER: {{ index $mongo_secret "data" "MONGODB_DATABASE_ADMIN_USER" }}
  MONGODB_DATABASE_ADMIN_PASSWORD: {{ index $mongo_secret "data" "MONGODB_DATABASE_ADMIN_PASSWORD" }}
  MONGODB_CLUSTER_ADMIN_USER: {{ index $mongo_secret "data" "MONGODB_CLUSTER_ADMIN_USER" }}
  MONGODB_CLUSTER_ADMIN_PASSWORD: {{ index $mongo_secret "data" "MONGODB_CLUSTER_ADMIN_PASSWORD" }}
  MONGODB_CLUSTER_MONITOR_USER: {{ index $mongo_secret "data" "MONGODB_CLUSTER_MONITOR_USER" }}
  MONGODB_CLUSTER_MONITOR_PASSWORD: {{ index $mongo_secret "data" "MONGODB_CLUSTER_MONITOR_PASSWORD" }}
  MONGODB_USER_ADMIN_USER: {{ index $mongo_secret "data" "MONGODB_USER_ADMIN_USER" }}
  MONGODB_USER_ADMIN_PASSWORD: {{ index $mongo_secret "data" "MONGODB_USER_ADMIN_PASSWORD" }}
  PMM_SERVER_API_KEY: {{ index $mongo_secret "data" "PMM_SERVER_API_KEY" }}
{{ else -}}
stringData:
  MONGODB_BACKUP_USER: backup
  MONGODB_BACKUP_PASSWORD: {{ randAlphaNum 16 }}
  MONGODB_DATABASE_ADMIN_USER: databaseAdmin
  MONGODB_DATABASE_ADMIN_PASSWORD: {{ randAlphaNum 16 }}
  MONGODB_CLUSTER_ADMIN_USER: clusterAdmin
  MONGODB_CLUSTER_ADMIN_PASSWORD: {{ randAlphaNum 16 }}
  MONGODB_CLUSTER_MONITOR_USER: clusterMonitor
  MONGODB_CLUSTER_MONITOR_PASSWORD: {{ randAlphaNum 16 }}
  MONGODB_USER_ADMIN_USER: userAdmin
  MONGODB_USER_ADMIN_PASSWORD: {{ randAlphaNum 16 }}
  PMM_SERVER_API_KEY: apikey
{{ end }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: percona-server-mongodb-operator
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Namespace }}:percona-server-mongodb-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: percona-server-mongodb-operator
subjects:
- kind: ServiceAccount
  name: percona-server-mongodb-operator
  namespace: {{ .Release.Namespace }}

---
apiVersion: v1
kind: Secret
metadata:
  name: mongo-cluster-backup-fakes3
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  AWS_ACCESS_KEY_ID: S3RVER
  AWS_SECRET_ACCESS_KEY: S3RVER

---
apiVersion: v1
kind: Service
metadata:
  name: tapr-s3-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: tapr-s3
  type: ClusterIP
  ports:
    - protocol: TCP
      name: tapr-s3
      port: 4568
      targetPort: 4568


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tapr-s3
  namespace: {{ .Release.Namespace }}
  labels:
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tapr-s3
  template:
    metadata:
      labels:
        app: tapr-s3
    spec:
      containers:
      - name: s3-fake-sidecar
        image: beclab/s3rver:latest
        imagePullPolicy: IfNotPresent
        command:
        - s3rver
        - -d 
        - /s3data
        - --configure-bucket
        - mongo-backup
        - -a
        - 0.0.0.0
        - --no-vhost-buckets
        ports:
        - containerPort: 4568
          protocol: TCP
        volumeMounts:
        - mountPath: /s3data/mongo-backup
          name: s3-data
        securityContext:
          privileged: true
      volumes:
      - name: s3-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ $mongo_backuppath }}/mongo-backup




---
apiVersion: psmdb.percona.com/v1
kind: PerconaServerMongoDB
metadata:
  name: mongo-cluster
  namespace: {{ .Release.Namespace }}
spec:
  crVersion: 1.15.2
  image: percona/percona-server-mongodb:6.0.4-3
  imagePullPolicy: IfNotPresent
  allowUnsafeConfigurations: true
  initContainerSecurityContext:
    privileged: true
    runAsUser: 1001
  upgradeOptions:
    apply: disabled
    schedule: "0 2 * * *"
  secrets:
    users: mdb-cluster-name-secrets
  replsets:
    - name: rs0
      size: 1
      containerSecurityContext:
        privileged: true
        runAsUser: 1001
      podSecurityContext:
        fsGroup: 1001
      resources:
        limits:
          cpu: "1"
          memory: "2.5G"
        requests:
          cpu: "30m"
          memory: "0.5G"
      volumeSpec:
        hostPath:
          type: Directory
          path: {{ $mongo_rootpath }}/mdbdata
      livenessProbe:
        exec:
          command:
          - /opt/percona/mongodb-healthcheck
          - k8s
          - liveness
          - --startupDelaySeconds
          - "7200"
        failureThreshold: 4
        initialDelaySeconds: 60
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
  sharding:
    enabled: true

    configsvrReplSet:
      size: 1
      containerSecurityContext:
        privileged: true
        runAsUser: 1001
      podSecurityContext:
        fsGroup: 1001
      volumeSpec:
        hostPath:
          type: Directory
          path: {{ $mongo_rootpath }}/mdbdata-config
      resources:
        limits:
          cpu: "500m"
          memory: "2G"
        requests:
          cpu: "30m"
          memory: "0.5G"
      livenessProbe:
        exec:
          command:
          - /opt/percona/mongodb-healthcheck
          - k8s
          - liveness
          - --startupDelaySeconds
          - "7200"
        failureThreshold: 4
        initialDelaySeconds: 60
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10

    mongos:
      size: 1
      livenessProbe:
        exec:
          command:
          - /opt/percona/mongodb-healthcheck
          - k8s
          - liveness
          - --component
          - mongos
          - --startupDelaySeconds
          - "10"
        failureThreshold: 4
        initialDelaySeconds: 60
        periodSeconds: 30
        successThreshold: 1
        timeoutSeconds: 10
      readinessProbe:
        exec:
          command:
          - /opt/percona/mongodb-healthcheck
          - k8s
          - readiness
          - --component
          - mongos
        failureThreshold: 3
        initialDelaySeconds: 10
        periodSeconds: 1
        successThreshold: 1
        timeoutSeconds: 1  
  backup:
    enabled: true
    image: beclab/percona-backup-mongo:2.2.2
    serviceAccountName: percona-server-mongodb-operator
    containerSecurityContext:
      privileged: true
      runAsUser: 1001
    podSecurityContext:
      fsGroup: 1001
#    resources:
#      limits:
#        cpu: "300m"
#        memory: "0.5G"
#      requests:
#        cpu: "300m"
#        memory: "0.5G"
    storages:
      s3-local:
        type: s3
        s3:
          bucket: mongo-backup
          credentialsSecret: mongo-cluster-backup-fakes3
          prefix: ""
          uploadPartSize: 10485760
          maxUploadParts: 10000
          storageClass: STANDARD
          insecureSkipTLSVerify: false
          endpointUrl: http://tapr-s3-svc.os-system:4568

