

{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $zinc_files_secret := (lookup "v1" "Secret" $namespace "zinc-files-secrets") -}}

{{- $password := "" -}}
{{ if $zinc_files_secret -}}
{{ $password = (index $zinc_files_secret "data" "password") }}
{{ else -}}
{{ $password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password := "" -}}
{{ if $zinc_files_secret -}}
{{ $redis_password = (index $zinc_files_secret "data" "redis_password") }}
{{ else -}}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password_data := "" -}}
{{ $redis_password_data = $redis_password | b64dec }}

{{- $pg_password := "" -}}
{{ if $zinc_files_secret -}}
{{ $pg_password = (index $zinc_files_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $files_frontend_nats_secret := (lookup "v1" "Secret" $namespace "files-frontend-nats-secrets") -}}
{{- $files_frontend_nats_password := "" -}}
{{ if $files_frontend_nats_secret -}}
{{ $files_frontend_nats_password = (index $files_frontend_nats_secret "data" "files_frontend_nats_password") }}
{{ else -}}
{{ $files_frontend_nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}


---
apiVersion: v1
kind: Secret
metadata:
  name: cloud-drive-integration-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: cloud-drive-integration-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: cloud-drive-integration
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: cloud_drive_integration_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: cloud-drive-integration-secrets
    databases:
    - name: cloud-drive-integration
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-drive-integration-secrets-auth
  namespace: {{ .Release.Namespace }}
data:
  redis_password: {{ $redis_password_data }}
  redis_addr: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379
  redis_host: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
  redis_port: '6379'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cloud-drive-integration-userspace-data
  namespace: {{ .Release.Namespace }}
data:
  appData: "{{ .Values.userspace.appData }}"
  appCache: "{{ .Values.userspace.appCache }}"
  username: "{{ .Values.bfl.username }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: files-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: files
    applications.app.bytetrade.io/name: files
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
    applications.app.bytetrade.io/author: bytetrade.io
  annotations:
    applications.app.bytetrade.io/icon: https://file.bttcdn.com/appstore/files/icon.png
    applications.app.bytetrade.io/title: Files
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/entrances: '[{"name":"files", "host":"files-service", "port":80,"title":"Files","windowPushState":true}]'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: files
  template:
    metadata:
      labels:
        app: files
        io.bytetrade.app: "true"
    spec:
      serviceAccountName: bytetrade-controller
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-data
        image: busybox:1.28
        securityContext:
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: fb-data
          mountPath: /appdata
        - name: uploads-temp
          mountPath: /uploadstemp
        command:
        - sh
        - -c
        - |
          chown -R 1000:1000 /uploadstemp && \
          chown -R 1000:1000 /appdata
      - args:
        - -it
        - authelia-backend.os-system:9091
        image: owncloudci/wait-for:latest
        imagePullPolicy: IfNotPresent
        name: check-auth
      - args:
        - -it
        - nats.user-system-{{ .Values.bfl.username }}:4222
        image: owncloudci/wait-for:latest
        imagePullPolicy: IfNotPresent
        name: check-nats
      - name: terminus-sidecar-init
        image: openservicemesh/init:v1.2.3
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities: 
            add:
            - NET_ADMIN
          runAsNonRoot: false
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        - |
          iptables-restore --noflush <<EOF
          # sidecar interception rules
          *nat
          :PROXY_IN_REDIRECT - [0:0]
          :PROXY_INBOUND - [0:0]
          -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
          -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
          -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
          -A PREROUTING -p tcp -j PROXY_INBOUND
          COMMIT
          EOF
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP

      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1"; do sleep 1; printf "-"; done; sleep 5; echo -e " >> PostgreSQL DB Server has started";
        env:
          - name: PGHOST
            value: citus-master-svc.user-system-{{ .Values.bfl.username }}
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: cloud_drive_integration_{{ .Values.bfl.username }}
          - name: PGPASSWORD
            value: "{{ $pg_password | b64dec }}"
          - name: PGDB
            value: user_space_{{ .Values.bfl.username }}_cloud_drive_integration
      containers:
#      - name: gateway
#        image: beclab/appdata-gateway:0.1.12
#        imagePullPolicy: IfNotPresent
#        ports:
#        - containerPort: 8080
#        env:
#        - name: FILES_SERVER_TAG
#          value: 'beclab/files-server:v0.2.27'
#        - name: NAMESPACE
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.namespace
#        - name: OS_SYSTEM_SERVER
#          value: system-server.user-system-{{ .Values.bfl.username }}

#      - name: files
#        image: beclab/files-server:v0.2.27
#        imagePullPolicy: IfNotPresent
#        volumeMounts:
#        - name: fb-data
#          mountPath: /appdata
#        - name: userspace-dir
#          mountPath: /data/Home
#        - name: userspace-app-dir
#          mountPath: /data/Application
#        - name: watch-dir
#          mountPath: /data/Home/Documents
#        - name: upload-appdata
#          mountPath: /appcache/
#        ports:
#        - containerPort: 8110
#        env:
#        - name: ES_ENABLED
#          value: 'True'
#        - name: WATCHER_ENABLED
#          value: 'True'
#        - name: cloud-drive-integration_BASE_ENABLED
#          value: 'True'
#        - name: BFL_NAME
#          value: '{{ .Values.bfl.username }}'
#        - name: FB_DATABASE
#          value: /appdata/database/filebrowser.db
#        - name: FB_CONFIG
#          value: /appdata/config/settings.json
#        - name: FB_ROOT
#          value: /data
#        - name: OS_SYSTEM_SERVER
#          value: system-server.user-system-{{ .Values.bfl.username }}
#        - name: OS_APP_SECRET
#          value: '{{ .Values.os.files.appSecret }}'
#        - name: OS_APP_KEY
#          value: {{ .Values.os.files.appKey }}
#        - name: ZINC_USER
#          value: zincuser-files-{{ .Values.bfl.username }}
#        - name: ZINC_PASSWORD
#          value: {{ $password | b64dec }}
#        - name: ZINC_HOST
#          value: zinc-server-svc.user-system-{{ .Values.bfl.username }}
#        - name: ZINC_PORT
#          value: "80"
#        - name: ZINC_INDEX
#          value: {{ .Release.Namespace }}_zinc-files
#        - name: WATCH_DIR
#          value: /data/Home/Documents
#        - name: PATH_PREFIX
#          value: /data/Home
#        - name: REDIS_HOST
#          value: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
#        - name: REDIS_PORT
#          value: '6379'
#        - name: REDIS_USERNAME
#          value: ''
#        - name: REDIS_PASSWORD
#          value: {{ $redis_password | b64dec }}
#        - name: REDIS_USE_SSL
#          value: 'false'
#          # use redis db 0 for redis cache
#        - name: REDIS_DB
#          value: '0'
#        - name: REDIS_URL
#          value: 'redis://:{{ $redis_password | b64dec }}@redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379/0'
#        - name: POD_NAME
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.name
#        - name: NAMESPACE
#          valueFrom:
#            fieldRef:
#              fieldPath: metadata.namespace
#        - name: CONTAINER_NAME
#          value: files
#        - name: NOTIFY_SERVER
#          value: fsnotify-svc.user-system-{{ .Values.bfl.username }}:5079
#        command:
#        - /filebrowser
#        - --noauth
      - name: files-frontend
        image: beclab/files-frontend:v1.3.14
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        ports:
        - containerPort: 80
        env:
          - name: NATS_HOST
            value: nats.user-system-{{ .Values.bfl.username }}
          - name: NATS_PORT
            value: '4222'
          - name: NATS_USERNAME
            value: user-system-{{ .Values.bfl.username }}-files-frontend
          - name: NATS_PASSWORD
            value: {{ $files_frontend_nats_password | b64dec }}
          - name: NATS_SUBJECT
            value: terminus.os-system.files-notify
        volumeMounts:
        - name: userspace-dir
          mountPath: /data
      - name: drive-server
        image: beclab/drive:v0.0.29
        imagePullPolicy: IfNotPresent
        env:
        - name: OS_SYSTEM_SERVER
          value: system-server.user-system-{{ .Values.bfl.username }}
        - name: DATABASE_URL
          value: postgres://cloud_drive_integration_{{ .Values.bfl.username }}:{{ $pg_password | b64dec }}@citus-master-svc.user-system-{{ .Values.bfl.username }}:5432/user_space_{{ .Values.bfl.username }}_cloud_drive_integration
        - name: REDIS_URL
          value: redis://:{{ $redis_password | b64dec }}@redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379/0
        - name: TASK_EXECUTOR_MAX_THREADS
          value: '6'
        ports: 
        - containerPort: 8181
        volumeMounts:
        - name: upload-data
          mountPath: /data/Home
        - name: upload-appdata
          mountPath: /appdata/
        - name: userspace-app-dir
          mountPath: /data/Application
      - name: task-executor
        image: beclab/driveexecutor:v0.0.29
        imagePullPolicy: IfNotPresent
        env:
        - name: OS_SYSTEM_SERVER
          value: system-server.user-system-{{ .Values.bfl.username }}
        - name: DATABASE_URL
          value: postgres://cloud_drive_integration_{{ .Values.bfl.username }}:{{ $pg_password | b64dec }}@citus-master-svc.user-system-{{ .Values.bfl.username }}:5432/user_space_{{ .Values.bfl.username }}_cloud_drive_integration
        - name: REDIS_URL
          value: redis://:{{ $redis_password | b64dec }}@redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379/0
        - name: TASK_EXECUTOR_MAX_THREADS
          value: '6'
        ports: 
        - containerPort: 8181
        volumeMounts:
        - name: upload-data
          mountPath: /data/Home
        - name: upload-appdata
          mountPath: /appdata/
        - name: userspace-app-dir
          mountPath: /data/Application
#      - name: terminus-upload-sidecar
#        image: beclab/upload:v1.0.3
#        env:
#        - name: UPLOAD_FILE_TYPE
#          value: '*'
#        - name: UPLOAD_LIMITED_SIZE
#          value: '21474836481'
#        volumeMounts:
#        - name: upload-data
#          mountPath: /data/Home
#        - name: upload-appdata
#          mountPath: /appdata/
#        - name: userspace-app-dir
#          mountPath: /data/Application
#        - name: uploads-temp
#          mountPath: /uploadstemp
#        resources: { }
#        terminationMessagePath: /dev/termination-log
#        terminationMessagePolicy: File
#        imagePullPolicy: IfNotPresent

      - name: terminus-envoy-sidecar
        image: bytetrade/envoy:v1.25.11
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        ports:
        - name: proxy-admin
          containerPort: 15000
        - name: proxy-inbound
          containerPort: 15003
        volumeMounts:
        - name: terminus-sidecar-config
          readOnly: true
          mountPath: /etc/envoy/envoy.yaml
          subPath: envoy.yaml
        command:
        - /usr/local/bin/envoy
        - --log-level
        - debug
        - -c
        - /etc/envoy/envoy.yaml
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP

      volumes:
      - name: watch-dir
        hostPath:
          type: Directory
          path: {{ .Values.userspace.userData }}/Documents
      - name: userspace-dir
        hostPath:
          type: Directory
          path: {{ .Values.userspace.userData }}
      - name: userspace-app-dir
        hostPath:
          type: Directory
          path: {{ .Values.userspace.appData }}
      - name: fb-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache}}/files
      - name: upload-data
        hostPath:
          type: Directory
          path: {{ .Values.userspace.userData }}
      - name: upload-appdata
        hostPath:
          type: Directory
          path: {{ .Values.userspace.appCache}}
      - name: uploads-temp
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache }}/files/uploadstemp
      - name: terminus-sidecar-config
        configMap:
          name: sidecar-upload-configs
          items:
          - key: envoy.yaml
            path: envoy.yaml

   

---
apiVersion: v1
kind: Service
metadata:
  name: files-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: files
  type: ClusterIP
  ports:
    - protocol: TCP
      name: files
      port: 80
      targetPort: 80

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: files-provider
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: files
  deployment: files
  description: files provider
  endpoint: files-service.{{ .Release.Namespace }}
  group: service.files
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
    - name: Query
      uri: /provider/query_file
    - name: GetSearchFolderStatus
      uri: /provider/get_search_folder_status
    - name: UpdateSearchFolderPaths
      uri: /provider/update_search_folder_paths
    - name: GetDatasetFolderStatus
      uri: /provider/get_dataset_folder_status
    - name: UpdateDatasetFolderPaths
      uri: /provider/update_dataset_folder_paths
  version: v1
status:
  state: active

#---
#apiVersion: sys.bytetrade.io/v1alpha1
#kind: ApplicationPermission
#metadata:
#  name: files
#  namespace: user-system-{{ .Values.bfl.username }}
#spec:
#  app: files
#  appid: files
#  key: {{ .Values.os.files.appKey }}
#  secret: {{ .Values.os.files.appSecret }}
#  permissions:
#    - dataType: gateway
#      group: service.difyfusionclient
#      ops:
#        - DifyGatewayBaseProvider
#      version: v1
#status:
#  state: active

#---
#apiVersion: v1
#data:
#  mappings: |
#    {
#      "properties": {
#        "@timestamp": {
#          "type": "date",
#          "index": true,
#          "store": false,
#          "sortable": true,
#          "aggregatable": true,
#          "highlightable": false
#        },
#        "_id": {
#          "type": "keyword",
#          "index": true,
#          "store": false,
#          "sortable": true,
#          "aggregatable": true,
#          "highlightable": false
#        },
#        "content": {
#          "type": "text",
#          "index": true,
#          "store": true,
#          "sortable": false,
#          "aggregatable": false,
#          "highlightable": true
#        },
#        "created": {
#          "type": "numeric",
#          "index": true,
#          "store": false,
#          "sortable": true,
#          "aggregatable": true,
#          "highlightable": false
#        },
#        "format_name": {
#          "type": "text",
#          "index": true,
#          "store": false,
#          "sortable": false,
#          "aggregatable": false,
#          "highlightable": false
#        },
#        "md5": {
#          "type": "text",
#          "analyzer": "keyword",
#          "index": true,
#          "store": false,
#          "sortable": false,
#          "aggregatable": false,
#          "highlightable": false
#        },
#        "name": {
#          "type": "text",
#          "index": true,
#          "store": false,
#          "sortable": false,
#          "aggregatable": false,
#          "highlightable": false
#        },
#        "size": {
#          "type": "numeric",
#          "index": true,
#          "store": false,
#          "sortable": true,
#          "aggregatable": true,
#          "highlightable": false
#        },
#        "updated": {
#          "type": "numeric",
#          "index": true,
#          "store": false,
#          "sortable": true,
#          "aggregatable": true,
#          "highlightable": false
#        },
#        "where": {
#          "type": "text",
#          "analyzer": "keyword",
#          "index": true,
#          "store": false,
#          "sortable": false,
#          "aggregatable": false,
#          "highlightable": false
#        }
#      }
#    }
#kind: ConfigMap
#metadata:
#  name: zinc-files
#  namespace: user-system-{{ .Values.bfl.username }}

---
apiVersion: v1
kind: Secret
metadata:
  name: zinc-files-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  password: {{ $password }}
  redis_password: {{ $redis_password }}
  pg_password: {{ $pg_password }}

---
apiVersion: v1
kind: Secret
metadata:
  name: files-frontend-nats-secrets
  namespace: user-system-{{ .Values.bfl.username }}
data:
  files_frontend_nats_password: {{ $files_frontend_nats_password }}
type: Opaque

#---
#apiVersion: apr.bytetrade.io/v1alpha1
#kind: MiddlewareRequest
#metadata:
#  name: zinc-files
#  namespace: user-system-{{ .Values.bfl.username }}
#spec:
#  app: files
#  appNamespace: user-space-{{ .Values.bfl.username }}
#  middleware: zinc
#  zinc:
#    user: zincuser-files-{{ .Values.bfl.username }}
#    password:
#      valueFrom:
#        secretKeyRef:
#          key: password
#          name: zinc-files-secrets
#    indexes:
#      - name: zinc-files
#        namespace: user-system-{{ .Values.bfl.username }}
#        key: mappings

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: zinc-files-redis
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: files
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: redis
  redis:
    password:
      valueFrom:
        secretKeyRef:
          key: redis_password
          name: zinc-files-secrets
    namespace: zinc-files

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: files-frontend-nat
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: files-frontend
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: files_frontend_nats_password
          name: files-frontend-nats-secrets
    refs:
      - appName: files-server
        appNamespace: os-system
        subjects:
          - name: files-notify
            perm:
              - pub
              - sub
    user: user-system-{{ .Values.bfl.username }}-files-frontend

---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 15003
          listener_filters:
            - name: envoy.filters.listener.original_dst
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: desktop_http
                    upgrade_configs:
                      - upgrade_type: websocket
                      - upgrade_type: tailscale-control-protocol
                    skip_xff_append: false
                    max_request_headers_kb: 500
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/upload"
                              route:
                                cluster: upload_original_dst
                            - match:
                                prefix: "/"
                              route:
                                cluster: original_dst
                                timeout: 600s
                    http_protocol_options:
                      accept_http_10: true
                    http_filters:
                      - name: envoy.filters.http.ext_authz
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                          http_service:
                            path_prefix: '/api/verify/'
                            server_uri:
                              uri: authelia-backend.os-system:9091
                              cluster: authelia
                              timeout: 2s
                            authorization_request:
                              allowed_headers:
                                patterns:
                                  - exact: accept
                                  - exact: cookie
                                  - exact: proxy-authorization
                                  - prefix: x-unauth-
                                  - exact: x-authorization
                                  - exact: x-bfl-user
                                  - exact: terminus-nonce
                              headers_to_add:
                                - key: X-Forwarded-Method
                                  value: '%REQ(:METHOD)%'
                                - key: X-Forwarded-Proto
                                  value: '%REQ(:SCHEME)%'
                                - key: X-Forwarded-Host
                                  value: '%REQ(:AUTHORITY)%'
                                - key: X-Forwarded-Uri
                                  value: '%REQ(:PATH)%'
                                - key: X-Forwarded-For
                                  value: '%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%'
                            authorization_response:
                              allowed_upstream_headers:
                                patterns:
                                  - exact: authorization
                                  - exact: proxy-authorization
                                  - prefix: remote-
                                  - prefix: authelia-
                              allowed_client_headers:
                                patterns:
                                  - exact: set-cookie
                              allowed_client_headers_on_success:
                                patterns:
                                  - exact: set-cookie
                          failure_mode_allow: false
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

        - name: listener_image
          address:
            socket_address:
              address: 127.0.0.1
              port_value: 15080
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: tapr_http
                    http_protocol_options:
                      accept_http_10: true
                    upgrade_configs:
                      - upgrade_type: websocket
                    skip_xff_append: false
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/images/upload"
                              route:
                                cluster: images
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router


      clusters:
        - name: original_dst
          connect_timeout: 5000s
          type: ORIGINAL_DST
          lb_policy: CLUSTER_PROVIDED
        - name: upload_original_dst
          connect_timeout: 5000s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: upload_original_dst
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: files-service.os-system
                          port_value: 80
        - name: authelia
          connect_timeout: 2s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: authelia
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: authelia-backend.os-system
                          port_value: 9091
        - name: images
          connect_timeout: 5s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: images
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: tapr-images-svc.user-system-{{ .Values.bfl.username }}
                          port_value: 8080
kind: ConfigMap
metadata:
  name: sidecar-upload-configs
  namespace: {{ .Release.Namespace }}
