

---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: user-space-{{ .Values.bfl.username }} 
  name: tailscale

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-space-{{ .Values.bfl.username }}:admin
subjects:
  - kind: ServiceAccount
    namespace: user-space-{{ .Values.bfl.username }} 
    name: tailscale
roleRef:
  kind: Role
  name: admin
  apiGroup: rbac.authorization.k8s.io


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: headscale
  namespace: user-space-{{ .Values.bfl.username }}
  labels:
    app: headscale
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: headscale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: headscale
    spec:
      serviceAccountName: tailscale
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
      - name: init-data
        image: busybox:1.28
        securityContext:
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: headscale-data
          mountPath: /var/lib/headscale
        - name: config-parent
          mountPath: /headscale
        command:
        - sh
        - -c
        - |
          chown -R 1000:1000 /headscale 
      - name: init
        image: beclab/headscale-init:v0.1.5
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
        env:
        - name: NAMESPACE
          value: bfl.user-space-{{ .Values.bfl.username }}
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
      containers:
      - name: headscale
        image: headscale/headscale:0.22.3
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        command:
        - headscale
        - serve
        lifecycle:
          postStart:
            exec:
              command:
                - "sh"
                - "-xc"
                - "(date; for i in `seq 1 600`; do if ! test -S /var/run/headscale.sock; then echo wait-headscale.sock-1s; sleep 1; else break; fi; done; headscale apikeys create -e 3650d > /etc/headscale/apikey; headscale users create default; headscale preauthkeys create -e 3650d -u default > /etc/headscale/preauthkey; if ! test -s /etc/headscale/apikey; then echo apikey-empty; exit 1; fi; if ! test -s /etc/headscale/preauthkey; then echo preauthkey-empty; exit 1; fi) >> /tmp/headscale.log 2>&1"
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: headscale-data
          mountPath: /var/lib/headscale
        ports:
        - containerPort: 8080
      - args:
        - APIKEY=$(cat /etc/headscale/apikey) exec /headscale-api-wrapper
        command:
        - /bin/sh
        - -c
        image: beclab/headscale-api-wrapper:v0.1.6
        imagePullPolicy: IfNotPresent
        name: headscale-api-wrapper
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/headscale
          name: config
        ports:
        - containerPort: 9000
        - containerPort: 8000
      volumes:
      - name: config
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache  }}/headscale/config
      - name: headscale-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache }}/headscale/data
      - name: config-parent
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache  }}/headscale

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tailscale
  namespace: user-space-{{ .Values.bfl.username }}
  labels:
    app: tailscale
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tailscale
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: tailscale
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: tailscale
        image: tailscale/tailscale:v1.48.1
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh", "-c"]
        args:
          - >-
            TS_AUTHKEY=$(cat /etc/headscale/preauthkey)
            exec /usr/local/bin/containerboot
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: config
          mountPath: /etc/headscale
        - name: tailscale-data
          mountPath: /var/lib/tailscale
        env:
        - name: TS_DISABLE_TAILDROP
          value: "true"
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: TS_SOCKET
          value: "/var/run/tailscale/tailscaled.sock"
        - name: TS_STATE_DIR
          value: "/var/lib/tailscale/"
        - name: TS_TAILSCALED_EXTRA_ARGS
          value: "--no-logs-no-support --verbose=1"
        - name: TS_ROUTES
          value: $(NODE_IP)/32
        - name: TS_EXTRA_ARGS
          value: "--login-server http://headscale-server-svc:8080"
        - name: TS_KUBE_SECRET
      volumes:
      - name: config
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache }}/headscale/config
      - name: tailscale-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appCache }}/tailscale/data

---
apiVersion: v1
kind: Service
metadata:
  name: headscale-server-svc
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: headscale
  type: ClusterIP
  ports:
    - protocol: TCP
      name: headscale
      port: 8080
      targetPort: 8080
    - protocol: TCP
      name: api
      port: 8000
      targetPort: 8000

---
apiVersion: v1
kind: Service
metadata:
  name: headscale-authkey-svc
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  selector:
    app: headscale
  type: ClusterIP
  ports:
    - protocol: TCP
      name: headscale
      port: 9000
      targetPort: 9000

---

apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: headscale-provider
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: headscale
  deployment: headscale
  description: headscale provider
  endpoint: headscale-server-svc.{{ .Release.Namespace }}:8000
  group: service.headscale
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: GetMachine
    uri: /headscale/machine
  - name: RenameMachine
    uri: /headscale/machine/rename
  - name: DeleteMachine
    uri: /headscale/machine
  - name: GetRoute
    uri: /headscale/machine/routes
  - name: EnableRoute
    uri: /headscale/routes/enable
  - name: DisableRoute
    uri: /headscale/routes/disable
  - name: SetTags
    uri: /headscale/machine/tags
  version: v1
status:
  state: active