package upgrade

import (
	"bytetrade.io/web3os/installer/pkg/common"
	"bytetrade.io/web3os/installer/pkg/core/connector"
	"bytetrade.io/web3os/installer/pkg/core/logger"
	"bytetrade.io/web3os/installer/pkg/utils"
	"context"
	"fmt"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/kubernetes"
	metadataclient "k8s.io/client-go/metadata"
	"os"
	"path"
	ctrl "sigs.k8s.io/controller-runtime"
	"time"
)

type PrepareUserInfoForUpgrade struct {
	common.KubeAction
}

func (p *PrepareUserInfoForUpgrade) Execute(runtime connector.Runtime) error {
	config, err := ctrl.GetConfig()
	if err != nil {
		return fmt.Errorf("failed to get rest config: %s", err)
	}
	// we only need user's metadata, this avoids the dependency on kubesphere's module
	metadataClient, err := metadataclient.NewForConfig(config)
	if err != nil {
		return fmt.Errorf("failed to get metadata client: %s", err)
	}
	userGVR := schema.GroupVersionResource{
		Group:    "iam.kubesphere.io",
		Version:  "v1alpha2",
		Resource: "users",
	}
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Minute)
	defer cancel()
	users, err := metadataClient.Resource(userGVR).List(ctx, metav1.ListOptions{})
	if err != nil {
		return fmt.Errorf("failed to list users: %s", err)
	}
	var usersToUpgrade []metav1.PartialObjectMetadata
	var adminUser string
	client, err := kubernetes.NewForConfig(config)
	if err != nil {
		return fmt.Errorf("failed to create kubernetes client: %s", err)
	}
	for _, user := range users.Items {
		ctx, cancel := context.WithTimeout(context.Background(), 1*time.Minute)
		defer cancel()
		_, err := client.CoreV1().Namespaces().Get(ctx, fmt.Sprintf("user-space-%s", user.Name), metav1.GetOptions{})
		if err != nil {
			if apierrors.IsNotFound(err) {
				logger.Infof("ignoring non-olares user: %s", user.Name)
				continue
			}
			return fmt.Errorf("failed to get user-space-%x: %v", user.Name, err)
		}
		usersToUpgrade = append(usersToUpgrade, user)
		if role, ok := user.Annotations["bytetrade.io/owner-role"]; ok && role == "platform-admin" {
			adminUser = user.Name
		}
	}
	if len(usersToUpgrade) > 0 {
		logger.Infof("found %d users to upgrade", len(usersToUpgrade))
	}
	if adminUser == "" {
		return fmt.Errorf("no admin user found")
	}
	p.PipelineCache.Set(common.CacheUpgradeUsers, usersToUpgrade)
	p.PipelineCache.Set(common.CacheUpgradeAdminUser, adminUser)

	return nil
}

type UpgradeUserComponents struct {
	common.KubeAction
}

func (u *UpgradeUserComponents) Execute(runtime connector.Runtime) error {
	config, err := ctrl.GetConfig()
	if err != nil {
		return fmt.Errorf("failed to get rest config: %s", err)
	}
	client, err := kubernetes.NewForConfig(config)
	if err != nil {
		return fmt.Errorf("failed to create kubernetes client: %s", err)
	}

	usersCache, ok := u.PipelineCache.Get(common.CacheUpgradeUsers)
	if !ok {
		return fmt.Errorf("no users to upgrade found in cache")
	}
	users := usersCache.([]metav1.PartialObjectMetadata)
	adminUserCache, ok := u.PipelineCache.Get(common.CacheUpgradeAdminUser)
	if !ok {
		return fmt.Errorf("no admin user to upgrade found in cache")
	}
	adminUser := adminUserCache.(string)

	bflChartPath := path.Join(runtime.GetInstallerDir(), "wizard/config/launcher")

	appsChartDir := path.Join(runtime.GetInstallerDir(), "wizard", "config", "apps")
	appEntries, err := os.ReadDir(appsChartDir)
	if err != nil {
		return fmt.Errorf("failed to list %s: %v", appsChartDir, err)
	}
	var apps []string
	for _, entry := range appEntries {
		if entry.IsDir() {
			apps = append(apps, entry.Name())
		}
	}

	for _, user := range users {
		logger.Infof("upgrading for user: %s", user.Name)
		ns := fmt.Sprintf("user-space-%s", user.Name)
		ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
		defer cancel()
		sts, err := client.AppsV1().StatefulSets(ns).Get(ctx, "bfl", metav1.GetOptions{})
		if err != nil {
			return fmt.Errorf("failed to get bfl statefulset for user %s: %v", user.Name, err)
		}
		if sts == nil {
			return fmt.Errorf("bfl statefulset for user %s not found", user.Name)
		}
		bflVals := make(map[string]interface{})
		bflInnerVals := make(map[string]interface{})

		// these values are generated by helm during installation
		// and should be retrieved before upgrade
		// for other values, we can reuse them
		for _, key := range []string{"userspace_rand16", "appcache_rand16", "dbdata_rand16",
			"userspace_pv", "userspace_pvc",
			"appcache_pv", "appcache_pvc",
			"dbdata_pv", "dbdata_pvc"} {
			bflInnerVals[key] = sts.Annotations[key]
		}
		bflVals["bfl"] = bflInnerVals

		actionConfig, settings, err := utils.InitConfig(config, ns)
		if err != nil {
			return err
		}
		var bflReleaseName = fmt.Sprintf("launcher-%s", user.Name)
		if err := utils.UpgradeCharts(ctx, actionConfig, settings, bflReleaseName, bflChartPath, "", ns, bflVals, true); err != nil {
			return fmt.Errorf("failed to upgrade launcher: %v", err)
		}

		var wizardNeedUpgrade bool
		if wizardStatus, ok := user.Annotations["bytetrade.io/wizard-status"]; ok && wizardStatus == "completed" {
			wizardNeedUpgrade = true
		}

		for _, app := range apps {
			if !wizardNeedUpgrade && app == "wizard" {
				logger.Debugf("skipping upgrade wizard as user %s is already activated", user.Name)
				continue
			}
			releaseName := app
			if user.Name != adminUser {
				releaseName = fmt.Sprintf("%s-%s", app, user.Name)
			}
			ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
			defer cancel()
			if err := utils.UpgradeCharts(ctx, actionConfig, settings, releaseName, path.Join(appsChartDir, app), "", ns, nil, true); err != nil {
				return fmt.Errorf("failed to upgrade app %s: %v", app, err)
			}
		}

	}
	return nil
}

type UpgradeSystemComponents struct {
	common.KubeAction
}

func (u *UpgradeSystemComponents) Execute(runtime connector.Runtime) error {
	config, err := ctrl.GetConfig()
	if err != nil {
		return fmt.Errorf("failed to get rest config: %s", err)
	}
	actionConfig, settings, err := utils.InitConfig(config, common.NamespaceOsSystem)
	if err != nil {
		return err
	}
	ctx, cancel := context.WithTimeout(context.Background(), 3*time.Minute)
	defer cancel()
	systemChartPath := path.Join(runtime.GetInstallerDir(), "wizard", "config", "system")
	if err := utils.UpgradeCharts(ctx, actionConfig, settings, common.ChartNameSystem, systemChartPath, "", common.NamespaceOsSystem, nil, true); err != nil {
		return err
	}
	actionConfig, settings, err = utils.InitConfig(config, common.NamespaceDefault)
	if err != nil {
		return err
	}
	ctx, cancelSettings := context.WithTimeout(context.Background(), 3*time.Minute)
	defer cancelSettings()
	settingsChartPath := path.Join(runtime.GetInstallerDir(), "wizard", "config", "settings")

	if err := utils.UpgradeCharts(ctx, actionConfig, settings, common.ChartNameSettings, settingsChartPath, "", common.NamespaceDefault, nil, true); err != nil {
		return err
	}
	return nil
}
