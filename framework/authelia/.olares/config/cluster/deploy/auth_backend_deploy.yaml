

{{ $auth_rootpath := printf "%s%s" .Values.rootPath "/rootfs/auth" }}
{{- $auth_secret := (lookup "v1" "Secret" .Release.Namespace "authelia-secrets") -}}
{{- $jwt_secret := "" -}}
{{- $session_secret := "" -}}
{{- $hmac_secret := "" -}}
{{- $encryption_key := "" -}}
{{- $redis_password := "" -}}
{{- $pg_password := "" -}}
{{- $nats_password := "" -}}
{{ if $auth_secret -}}
{{- $jwt_secret = (index $auth_secret "data" "jwt_secret") -}}
{{- $session_secret = (index $auth_secret "data" "session_secret") -}}
{{- $hmac_secret = (index $auth_secret "data" "hmac_secret") -}}
{{- $encryption_key = (index $auth_secret "data" "encryption_key") -}}
{{- $redis_password = (index $auth_secret "data" "redis_password") -}}
{{- $pg_password = (index $auth_secret "data" "pg_password") -}}
{{- $nats_password = (index $auth_secret "data" "nats_password") -}}

{{ else -}}
{{ $jwt_secret = randAlphaNum 16 | b64enc }}
{{ $session_secret = randAlphaNum 16 | b64enc }}
{{ $hmac_secret = randAlphaNum 16 | b64enc }}
{{ $encryption_key = randAlphaNum 32 | b64enc }}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{ $nats_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: authelia-secrets
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  jwt_secret: {{ $jwt_secret }}
  session_secret: {{ $session_secret }}
  hmac_secret: {{ $hmac_secret }}
  encryption_key: {{ $encryption_key }}
  redis_password: {{ $redis_password }}
  pg_password: {{ $pg_password }}
  nats_password: {{ $nats_password }}


---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-pg
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: authelia_os_framework
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: authelia-secrets
    databases:
      - name: authelia

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: authelia-nats
  namespace: {{ .Release.Namespace }}
spec:
  app: authelia
  appNamespace: os
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nats_password
          name: authelia-secrets
    refs:
    - appName: notifications
      appNamespace: os
      subjects:
      - name: notification
        perm:
        - pub
        - sub
    user: os-authelia

---
apiVersion: v1
data:
  configuration.yaml: |
    jwt_secret: {{ $jwt_secret | b64dec }}
    default_redirection_url: /

    server:
      host: 0.0.0.0
      port: 9091
      buffers:
        read: 10240

    log:
      level: debug

    totp:
      issuer: terminus.os

    # duo_api:
    #  hostname: api-123456789.example.com
    #  integration_key: ABCDEF
    #  # This secret can also be set using the env variables AUTHELIA_DUO_API_SECRET_KEY_FILE
    #  secret_key: 1234567890abcdefghifjkl

    # authentication_backend:
    #   file:
    #     path: /config/users_database.yml
    authentication_backend:
      password_reset:
        disable: false
      refresh_interval: 5m
      lldap:
        implementation: custom
        url: ldap://lldap-service.os-platform:3890
        timeout: 5s
        start_tls: false
        base_dn: dc=example,dc=com
        additional_users_dn: ou=users
        users_filter: (&({username_attribute}={input})(objectClass=person))
        additional_groups_dn: ou=groups
        groups_filter: "(member={dn})"
        group_name_attribute: cn
        mail_attribute: mail
        display_name_attribute: displayName
        username_attribute: uid
        server: lldap-service.os-platform
        port: 17170
        user: cn=admin,dc=example,dc=com
        password: adminpassword

    access_control:
      config_type: terminus
      default_policy: deny
      rules:
        # Rules applied to everyone
        - domain: example.myterminus.com
          policy: one_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']
        - domain: 'files.example.myterminus.com'
          policy: two_factor
          # subject:
          # - ['group:platform-admin', 'group:workspace-manager']

    session:
      # This secret can also be set using the env variables AUTHELIA_SESSION_SECRET_FILE
      secret: {{ $session_secret | b64dec }}
      name: authelia_session
      same_site: 'none'

      # expiration: 1209600  # probably nanosecond
      # inactivity: 1209600  # 5 minutes
      cookies:
        - domain: 'example.com'
          authelia_url: https://authelia-svc.example.com/

    regulation:
      max_retries: 3
      find_time: 120
      ban_time: 300

    storage:
      encryption_key: {{ $encryption_key | b64dec }}
      postgres:
        host: citus-headless.os-platform
        port: 5432
        database: os_framework_authelia
        schema: public
        username: authelia_os_framework
        password: {{ $pg_password | b64dec }}
        timeout: 5s
        
    notifier:
      disable_startup_check: false
      filesystem:
        filename: /app/notification.txt
    identity_providers:
      oidc:
        hmac_secret: {{ $hmac_secret | b64dec }}
        issuer_certificate_chain: |
          -----BEGIN CERTIFICATE-----
          MIIDDTCCAfWgAwIBAgIUdM9BAXuL5PA2v5BXR2WVAU6afOwwDQYJKoZIhvcNAQEL
          BQAwFjEUMBIGA1UEAwwLZXhhbXBsZS5jb20wHhcNMjUwNzA0MDk1MTMxWhcNMzUw
          NzAyMDk1MTMxWjAWMRQwEgYDVQQDDAtleGFtcGxlLmNvbTCCASIwDQYJKoZIhvcN
          AQEBBQADggEPADCCAQoCggEBAKO8UJwSCfpb2CDf0H0g0WcVLLFCNGXeg0P317Rx
          usapXFOKEOC5F0Q9OEpAiIugqLBrX2fC/YzPEPmxwd8jml/mE7dnCsdkrqYE5u0V
          DmDtvwwTw9zi36/FKuksQ6ws83K2G9rBBMc9tpcSz4DXcNFMtuJPou9WTIHTqNcO
          S/ZxRm4YeZ8pFWdV5VxSUUORl7WefiWzhU5q8/Q49bVfcTudovg9tSlSe065zcOw
          vlbsDoatFrDP3hAF5dBG59JHsOZ4bQUyneEKurB2R3hmICz7MHq+YINNcFzc057u
          HgcCsCwuXFcdbnpNu04gGtGVAi8PjzHjZOSW0brVyaRyafsCAwEAAaNTMFEwHQYD
          VR0OBBYEFM3Cd+IpniPbD1+huRglO+ZeX1d+MB8GA1UdIwQYMBaAFM3Cd+IpniPb
          D1+huRglO+ZeX1d+MA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEB
          ACI8wWr4AmJwX9wZ3Ff6rwvF31fAD+cUEB5EVXdxvNUi05LFdcuwMbGX1ZR7030h
          yPKwfVAnUJfb9dFoeoh8TF7yz/yeRp51ZwBHqqeskTqicK8wPH98XweVvY0yRnQk
          zmlJvtLTl232E5BHw/5JJFWBA3vJc3cnY3vkDWuDknGGPPBjPh/KQbgAZljzrXUj
          0/VXZAaXXKefEucj5Vzj4nHJyCTsoUvUvZbZ+xlkDgITrdBOs14AoXV/lHFF21no
          /QC2zvguS9bzx1vEGQiLqYnc3zM8na6AqMiFPlqdTUutfAnlw0Am+/cAGX61K6uY
          p9J4w4C3fXOVcAMeN7BhKuk=
          -----END CERTIFICATE-----
        issuer_private_key: |
          -----BEGIN PRIVATE KEY-----
          MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCjvFCcEgn6W9gg
          39B9INFnFSyxQjRl3oND99e0cbrGqVxTihDguRdEPThKQIiLoKiwa19nwv2MzxD5
          scHfI5pf5hO3ZwrHZK6mBObtFQ5g7b8ME8Pc4t+vxSrpLEOsLPNythvawQTHPbaX
          Es+A13DRTLbiT6LvVkyB06jXDkv2cUZuGHmfKRVnVeVcUlFDkZe1nn4ls4VOavP0
          OPW1X3E7naL4PbUpUntOuc3DsL5W7A6GrRawz94QBeXQRufSR7DmeG0FMp3hCrqw
          dkd4ZiAs+zB6vmCDTXBc3NOe7h4HArAsLlxXHW56TbtOIBrRlQIvD48x42TkltG6
          1cmkcmn7AgMBAAECggEAJ2JgsWnVZJc7AY1UhQSj2fvJ6ElYeThwsqSnCgxhNO//
          +Ug4jxV2dz+Sjqm/LnbSnLz3EephOsGD/8u2KopR08dv7qmmehfJur1rHpP2BXKq
          hakrb7JSw+DVVYkELiIR3QHY6WGMWLCLfwNTTlaEGJQvWXh2ZMOJW6Eh97jEpN5v
          6AYc+tTJ1zFZyf+ezK5ejOuBHLpEyDq+8FZP44BzjBJAEekUmLPBe48Hn8IGhPaY
          Sg4T31AAaNaq976jWkzxq1aIy+MmbZU4n+dJ71GHJqOu61RDbqa4UhyEyslrlazJ
          3L2ohiUPUcGO8uG9My4glY4Ua0ge+HFD4BVApc4DoQKBgQDNYqi6nPuvIPg4UCh1
          abJfjvsFBltOk22ANXsREJ920rdqzplRygf8W6hQP5drGuKvr+SrlRWZ7LRRAyaF
          mV7Lktljp2SZ7K99K/ThK6T0tLPzqC6VyJ6tsmjovRV/CMXDDxBk3oCg8sXhTsBg
          EdApPYFcJPP2RxTB4eWfRqrIjQKBgQDMFg6NbhvqNIP8PfaoqL6fcibJFQa7VZka
          9lNbrq7YO7llXvQ+93twWFRpEupCKr1ZXzizH9JvYu174hT3OJSEA8jNb4oIGZVG
          6xNlSHne4ajHhi8ngc8w84Reph0dBs5woQ4ICeXsA5YhgmIhsVvxogDiJ9G1q5mi
          9KguFZFupwKBgFmPZghKIC4T8GmN+raIarHkxW1BgltXSm6X45xjZUYJSNYYVR8n
          PCg9R74GnN6lkKgPyWVQ02SVpWOWPhwP7xhSZt1fxyyf2z54BoaR45KZocbkVbwX
          Caqwm7KxkUgd6S7PyNRTej+03bkMADNkUSNKoLgvnPqNsG2DNgAobpyZAoGBAL0S
          wjCtDheQx6ZtEZN3ogK+EsjAPhhYWRvtkZSi5UFXM4+CxO2BAk82xh0CdR0P05R0
          72aj2KVxFWtsLNhNBuq3RtVsvIh8ixvEtZdj6eRfU6pl2lHTpUxIjx3Q76/wmlkm
          HIW+BdD+EZzB2oA0fGYEHKVpFpQkgpXB6/2l5bKJAoGAOGXeT+Vpc4SFWfBwKShZ
          ErjAdrd6v6tLVl39RK8kCVXDNJQKBmCD1kB5xCB2Q3lLqmbihGOA7hr0PdYStDGZ
          Tdo8BskUJABQH3c3jDDJpPy0SxrSQpCh8gUXCCgMXN9ZmjX6kp2i3PFdntacgFwQ
          MabDTapwgVEgHL3T2lfGgjI=
          -----END PRIVATE KEY-----
        access_token_lifespan: 1h
        authorize_code_lifespan: 1m
        id_token_lifespan: 1h
        refresh_token_lifespan: 90m
        enable_client_debug_messages: false
        enforce_pkce: public_clients_only
        cors:
          endpoints:
            - authorization
            - token
            - revocation
            - introspection
        clients:
          - id: example
            description: example
            secret: '$pbkdf2-sha512$310000$c8p78n7pUMln0jzvd4aK4Q$JNRBzwAo0ek5qKn50cFzzvE9RXV88h1wJn5KGiHrD0YKtZaR/nCb2CJPOsKaPK0hjf.9yHxzQGZziziccp6Yng'  # The digest of 'insecure_secret'.
            sector_identifier: ''
            public: false
            authorization_policy: two_factor
            consent_mode: implicit
            pre_configured_consent_duration: 1w
            audience: []
            scopes:
              - openid
              - groups
              - email
              - profile
            redirect_uris:
              - https://www.example.com/auth/auth/openid_connect/callback
            grant_types:
              - refresh_token
              - authorization_code
            response_types:
              - code
            response_modes:
              - form_post
              - query
              - fragment
            userinfo_signing_algorithm: none
  # users_database.yaml: |
  #   users:
  #     authelia:
  #       disabled: false
  #       displayname: "Authelia User"
  #       # Password is authelia
  #       password: "$6$rounds=50000$BpLnfgDsc2WD8F2q$Zis.ixdg9s/UOJYrs56b5QEZFiZECu0qZVNsIYxBaNJ7ucIL.nlxVCT5tqh8KHG8X4tlwCFm5r6NTOZZ5qRFN/"  # yamllint disable-line rule:line-length
  #       email: authelia@authelia.com
  #       groups:
  #         - admins
  #         - dev

kind: ConfigMap
metadata:
  name: authelia-configs
  namespace: {{ .Release.Namespace }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: authelia-backend
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authelia-backend
  template:
    metadata:
      labels:
        app: authelia-backend
    spec:
      serviceAccountName: os-internal
      serviceAccount: os-internal
      priorityClassName: "system-cluster-critical"
      initContainers:
      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment";
            until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1";
            do sleep 1; printf "-"; done; sleep 15;
            echo -e " >> $PGDB exists";
        env:
          - name: PGHOST
            value: citus-headless.os-platform
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: authelia_os_framework
          - name: PGPASSWORD
            value: {{ $pg_password | b64dec }}
          - name: PGDB
            value: os_framework_authelia
      - name: setsysctl
        image: 'busybox:1.28'
        command:
          - sh
          - '-c'
          - |
            sysctl -w net.core.somaxconn=65535
            sysctl -w net.ipv4.ip_local_port_range="1024 65535"
            sysctl -w net.ipv4.tcp_tw_reuse=1
            sysctl -w fs.file-max=1048576
        securityContext:
          privileged: true
      containers:      
      - name: authelia
        image: beclab/auth:0.2.10
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        env:
        - name: TZ
          value: UTC
        - name: APP_RANDOM_KEY
          valueFrom:
            secretKeyRef:
              name: app-key
              key: random-key
        - name: NATS_HOST
          value: nats.os-platform
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: os-authelia
        - name: NATS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: nats_password
              name: authelia-secrets
        - name: NATS_SUBJECT
          value: "os.notification"

        volumeMounts:
        - name: config
          mountPath: /app/configuration.yml
          subPath: configuration.yaml
        - name: data
          mountPath: /config

      volumes:
      - name: config
        configMap:
          name: authelia-configs
          defaultMode: 438
          items:
          - key: configuration.yaml
            path: configuration.yaml
      - name: data
        hostPath:
          type: DirectoryOrCreate
          path: '{{ $auth_rootpath }}'

---
apiVersion: v1
kind: Service
metadata:
  name: authelia-backend
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: authelia-backend
  type: ClusterIP
  ports:
    - protocol: TCP
      name: authelia
      port: 9091
      targetPort: 9091
