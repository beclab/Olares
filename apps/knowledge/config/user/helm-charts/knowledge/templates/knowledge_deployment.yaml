{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $knowledge_secret := (lookup "v1" "Secret" $namespace "rss-secrets") -}}

{{- $zinc_knowledge_secret := (lookup "v1" "Secret" $namespace "zinc-knowledge-secrets") -}}
{{- $password_zinc := "" -}}
{{ if $zinc_knowledge_secret -}}
{{ $password_zinc = (index $zinc_knowledge_secret "data" "password") }}
{{ else -}}
{{ $password_zinc = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password := "" -}}
{{ if $knowledge_secret -}}
{{ $redis_password = (index $knowledge_secret "data" "redis_password") }}
{{ else -}}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password_data := "" -}}
{{ $redis_password_data = $redis_password | b64dec }}


{{- $pg_password := "" -}}
{{ if $knowledge_secret -}}
{{ $pg_password = (index $knowledge_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: knowledge-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: knowledge-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: knowledge
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: knowledge_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: knowledge-secrets
    databases:
    - name: knowledge
      extensions:
      - pg_trgm
      - btree_gin
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-secrets-auth
  namespace: {{ .Release.Namespace }}
data:
  redis_password: {{ $redis_password_data }}
  redis_addr: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}:6379
  redis_host: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
  redis_port: '6379'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: knowledge-userspace-data
  namespace: {{ .Release.Namespace }}
data:
  appData: "{{ .Values.userspace.appData }}"
  appCache: "{{ .Values.userspace.appCache }}"
  username: "{{ .Values.bfl.username }}"

---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledge
  namespace: {{ .Release.Namespace }}
  labels:
    app: knowledge
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: knowledge
  template:
    metadata:
      labels:
        app: knowledge
    spec:
      containers:
      - name: knowledge
        image: "beclab/knowledge-base-api:v0.1.31"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3010
        env:
        - name: BACKEND_URL
          value: http://127.0.0.1:8080
        - name: REDIS_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: knowledge-secrets-auth
              key: redis_password
        - name: REDIS_ADDR
          valueFrom:
            configMapKeyRef:
              name: knowledge-secrets-auth
              key: redis_addr
        - name: PDF_SAVE_PATH
          value: /data/Home/Documents/Pdf/
        - name: PG_USERNAME
          value: knowledge_{{ .Values.bfl.username }}
        - name: PG_PASSWORD
          value: {{ $pg_password | b64dec }}
        - name: PG_HOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PG_PORT
          value: "5432"
        - name: PG_DATABASE
          value: user_space_{{ .Values.bfl.username }}_knowledge
        volumeMounts:
        - name: watch-dir
          mountPath: /data/Home/Documents

        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: "1"
            memory: 1Gi

      - name: backend-server
        image: "beclab/recommend-backend:v0.0.5"
        imagePullPolicy: IfNotPresent
        env:
        - name: LISTEN_ADDR
          value: 127.0.0.1:8080
        - name: OS_SYSTEM_SERVER
          value: system-server.user-system-{{ .Values.bfl.username }}
        - name: OS_APP_SECRET
          value: '{{ .Values.os.wise.appSecret }}'
        - name: OS_APP_KEY
          value: {{ .Values.os.wise.appKey }}
        - name: ZINC_RPC_START
          value: 'true'
        - name: ZINC_USER
          value: zincuser-knowledge-{{ .Values.bfl.username }}
        - name: ZINC_PASSWORD
          value: {{ $password_zinc | b64dec }}
        - name: ZINC_HOST
          value: zinc-server-svc.user-system-{{ .Values.bfl.username }}
        - name: ZINC_PORT
          value: "80"
        - name: ZINC_INDEX
          value: {{ .Release.Namespace }}_zinc-knowledge
        - name: RSS_HUB_URL
          value: 'http://rss-server.os-system:3010/rss'
        - name: WE_CHAT_REFRESH_FEED_URL
          value: https://recommend-wechat-prd.bttcdn.com/api/wechat/entries
        - name: WECHAT_ENTRY_CONTENT_GET_API_URL
          value: https://recommend-wechat-prd.bttcdn.com/api/wechat/entry/content
        - name: PG_USERNAME
          value: knowledge_{{ .Values.bfl.username }}
        - name: PG_PASSWORD
          value: {{ $pg_password | b64dec }}
        - name: PG_HOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PG_PORT
          value: "5432"
        - name: PG_DATABASE
          value: user_space_{{ .Values.bfl.username }}_knowledge

        
        ports:
        - containerPort: 8080
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: "800m"
            memory: 400Mi

      volumes:
      - name: watch-dir
        hostPath:
          type: Directory
          path: {{ .Values.userspace.userData }}/Documents


---
apiVersion: v1
kind: Service
metadata:
  name: rss-svc
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: knowledge
  ports:
    - name: "backend-server"
      protocol: TCP
      port: 8080
      targetPort: 8080
    # - name: "rss-sdk"
    #   protocol: TCP
    #   port: 3000
    #   targetPort: 3000
    - name: "knowledge-base-api"
      protocol: TCP
      port: 3010
      targetPort: 3010

---
apiVersion: v1
kind: Service
metadata:
  name: knowledge-base-api
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  type: ClusterIP
  selector:
    app: systemserver
  ports:
    - protocol: TCP
      name: knowledge-api
      port: 3010
      targetPort: 3010  
---
apiVersion: v1
data:
  mappings: |
    {
      "properties": {
        "@timestamp": {
          "type": "date",
          "index": true,
          "store": false,
          "sortable": true,
          "aggregatable": true,
          "highlightable": false
        },
        "_id": {
          "type": "keyword",
          "index": true,
          "store": false,
          "sortable": true,
          "aggregatable": true,
          "highlightable": false
        },
        "content": {
          "type": "text",
          "index": true,
          "store": true,
          "sortable": false,
          "aggregatable": false,
          "highlightable": true
        },
        "created": {
          "type": "numeric",
          "index": true,
          "store": false,
          "sortable": true,
          "aggregatable": true,
          "highlightable": false
        },
        "format_name": {
          "type": "text",
          "index": true,
          "store": false,
          "sortable": false,
          "aggregatable": false,
          "highlightable": false
        },
        "md5": {
          "type": "text",
          "analyzer": "keyword",
          "index": true,
          "store": false,
          "sortable": false,
          "aggregatable": false,
          "highlightable": false
        },
        "meta": {
          "type": "text",
          "index": true,
          "store": false,
          "sortable": false,
          "aggregatable": false,
          "highlightable": false
        },
        "name": {
          "type": "text",
          "index": true,
          "store": false,
          "sortable": false,
          "aggregatable": false,
          "highlightable": false
        },
        "where": {
          "type": "text",
          "analyzer": "keyword",
          "index": true,
          "store": false,
          "sortable": false,
          "aggregatable": false,
          "highlightable": false
        }
      }
    }
kind: ConfigMap
metadata:
  name: zinc-knowledge
  namespace: user-system-{{ .Values.bfl.username }}
 
---

apiVersion: v1
kind: Secret
metadata:
  name: zinc-knowledge-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  password: {{ $password_zinc }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: zinc-knowledge
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: knowledge
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: zinc
  zinc:
    user: zincuser-knowledge-{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: password
          name: zinc-knowledge-secrets
    indexes:
      - name: zinc-knowledge
        namespace: user-system-{{ .Values.bfl.username }}
        key: mappings

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: konwledgebase-recommend-install-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: recommend.install
  callback: http://rss-svc.{{ .Release.Namespace }}:3010/knowledge/algorithm/recommend/install
  
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: konwledgebase-recommend-uninstall-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: recommend.uninstall
  callback: http://rss-svc.{{ .Release.Namespace }}:3010/knowledge/algorithm/recommend/uninstall
