

# ---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: bytetrade-controller
#   namespace: {{ .Release.Namespace }}

# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: {{ .Release.Namespace }}:bytetrade-controller
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: cluster-admin
# subjects:
# - kind: ServiceAccount
#   name: bytetrade-controller
#   namespace: {{ .Release.Namespace }}

# ---
# apiVersion: v1
# data:
#   seafdav.conf: |
#     [WEBDAV]
#     enabled = true
#     port = 8080
#     share_name = /seafdav
#     workers = 2
#     timeout = 1200
# kind: ConfigMap
# metadata:
#   name: sync-config
#   namespace: {{ .Release.Namespace }}
{{ $seafile_application_rootpath := printf "%s%s" .Values.rootPath "/rootfs/Application/seafile" }}
{{ $seafile_appcache_rootpath := printf "%s%s" .Values.rootPath "/userdata/Cache/seafile" }}

{{- $namespace := printf "%s" "os-system" -}}
{{- $seafile_secret := (lookup "v1" "Secret" $namespace "seafile-secrets") -}}
{{- $pg_password := "" -}}
{{ if $seafile_secret -}}
{{ $pg_password = (index $seafile_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: seafile-secrets
  namespace: os-system
type: Opaque
data:
  pg_password: {{ $pg_password }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: seafile-pg
  namespace: os-system
spec:
  app: seafile
  appNamespace: os-system
  middleware: postgres
  postgreSQL:
    user: seafile_os_system
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: seafile-secrets
    databases:
      - name: ccnet
      - name: seafile
      - name: seahub

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: seafile-nginx-conf
  namespace: {{ .Release.Namespace }}
  annotations:
    kubesphere.io/creator: bytetrade.io
data:
  default.conf: |-
    server {
      listen 80;
      server_name _;
    
      underscores_in_headers on;

      location /published/:/ {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8000/;
        include proxy.conf;
      }

      location /assets/bundles {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:3000;
        include proxy.conf;
      }
    
      location /seafhttp/ {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8082/;
        include proxy.conf;
    
        # proxy_set_header Content-Type multipart/form-data;
        # proxy_set_header Content-Length "";
        # proxy_set_body $request_body;
      }
    
      location / {
        # access_by_lua_file login.lua;
    
        proxy_pass_request_headers on;
        proxy_pass http://127.0.0.1:8000;
        include proxy.conf;
      }    
    }
#  login.lua: |-
#    local headers = ngx.req.get_headers();
#    local username = "";
#
#    for key, value in pairs(headers) do
#      ngx.log(ngx.STDERR, key .. ": " .. value);
#      if key == "x-bfl-user" then
#        username = value;
#      end
#    end
#
#    local cookie = ngx.var.cookie_sfsessionid;
#    ngx.log(ngx.STDERR, cookie);
#    if username ~= "" and (cookie == nil or cookie == '') then
#        local orig_ct = ngx.req.get_headers()["Content-Type"];
#        ngx.req.set_header("Content-Type", "application/x-www-form-urlencoded");
#        local res = ngx.location.capture("/accounts/login/?next=/", {
#            method = ngx.HTTP_POST,
#            body = "login=" .. username .. "@seafile.com&password=abcd123456&next=/"
#        });
#        ngx.req.set_header("Content-Type", orig_ct);
#        if res.status == ngx.HTTP_OK or res.status == ngx.HTTP_MOVED_TEMPORARILY then
#            ngx.log(ngx.STDERR, "login success " .. res.status);
#
#            local new_cookie = res.header["Set-Cookie"];
#            ngx.log(ngx.STDERR, new_cookie);
#            ngx.req.set_header("Cookie", string.match(new_cookie, "[^;]+"));
#            ngx.header["Set-Cookie"] = new_cookie;
#        else
#            ngx.header["X-Redirected"] = "/";
#        end
#    end
  nginx.conf: |-
    user  nginx;
    worker_processes  4;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  750s;

        #gzip  on;
        client_max_body_size 2000M;
        client_body_buffer_size 2000M;

        include /etc/nginx/conf.d/*.conf;
    }
  proxy.conf: >-
    add_header 'Access-Control-Allow-Headers' 'x-api-nonce,X-api-ts,x-api-ver,X-api-source';
    proxy_set_header Host $http_host;
    proxy_set_header X-real-ip $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme; 
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header Referer $http_referer;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
  seafile.conf: |-
    [database]
    type = pgsql
    host = citus-headless.os-system
    port = 5432
    user = seafile_os_system
    password = {{ $pg_password | b64dec }}
    db_name = os_system_seafile
    connection_charset = utf8
    create_tables = true
  ccnet.conf: |-
    [Database]
    ENGINE = pgsql
    HOST = citus-headless.os-system
    PORT = 5432
    USER = seafile_os_system
    PASSWD = {{ $pg_password | b64dec }}
    DB = os_system_ccnet
    CONNECTION_CHARSET = utf8
    CREATE_TABLES = true

    [General]
    SERVICE_URL = /
  seahub_settings.py: |-
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'os_system_seahub',
            'USER': 'seafile_os_system',
            'PASSWORD': '{{ $pg_password | b64dec }}',
            'HOST': 'citus-headless.os-system',
            'PORT': '5432',
        }
    }
    FILE_SERVER_ROOT = '/seafhttp'

    import os
    PROJECT_ROOT = '/root/dev/source-code/seahub'
    WEBPACK_LOADER = {
        'DEFAULT': {
            'BUNDLE_DIR_NAME': 'frontend/',
            'STATS_FILE': os.path.join(PROJECT_ROOT,
                                       'frontend/webpack-stats.pro.json'),
        }
    }
    DEBUG = True
    FILESERVER_TOKEN_ONCE_ONLY = False

---
apiVersion: v1
kind: Service
metadata:
  name: seafile
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: seahub
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: server
      protocol: TCP
      port: 8082
      targetPort: 8082
    - name: nginx-port
      protocol: TCP
      port: 80
      targetPort: 80

  selector:
    tier: seafile

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile
  namespace: {{ .Release.Namespace }}
  labels:
    app: sync
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      tier: seafile
  template:
    metadata:
      labels:
        tier: seafile
    spec:
      initContainers:
        - name: init-container
          image: 'postgres:16.0-alpine3.18'
          command:
            - sh
            - '-c'
            - >-
              echo -e "Checking for the availability of PostgreSQL Server deployment";
              until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB1 -c "SELECT 1";
              do sleep 1; printf "-"; done; sleep 15;
              echo -e " >> $PGDB1 exists";
              until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB2 -c "SELECT 1";
              do sleep 1; printf "-"; done; sleep 15;
              echo -e " >> $PGDB2 exists";
              until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB3 -c "SELECT 1";
              do sleep 1; printf "-"; done; sleep 15;
              echo -e " >> $PGDB3 exists";
              until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB1 -c "SELECT 1";
              do sleep 1; printf "-"; done; sleep 15;
              echo -e " >> PostgreSQL DB Server has started";
          env:
            - name: PGHOST
              value: citus-headless.os-system
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: seafile_os_system
            - name: PGPASSWORD
              value: {{ $pg_password | b64dec }}
            - name: PGDB1
              value: os_system_ccnet
            - name: PGDB2
              value: os_system_seafile
            - name: PGDB3
              value: os_system_seahub

      containers:
#      - name: sync-mysql
#        image: lovehunter9/seahub_database_test:v0.0.3
#        imagePullPolicy: IfNotPresent
#        ports:
#        - containerPort: 3306
#          protocol: TCP
#        resources:
#          limits:
#            cpu: 1
#            memory: 1024Mi
#          requests:
#            cpu: 20m
#            memory: 100Mi
#        args:
#        - --max_connections=1000
#        - --character-set-server=utf8mb4
#        - --collation-server=utf8mb4_general_ci
#        - --default-authentication-plugin=mysql_native_password
#        volumeMounts:
#        - name: db-data
#          mountPath: /var/lib/mysql
#        livenessProbe:
#          initialDelaySeconds: 3
#          tcpSocket:
#            port: 3306
#        env:
#        - name: MYSQL_LOG_CONSOLE
#          value: "true"
#        - name: MYSQL_ROOT_PASSWORD
#          value: "123456"
#        - name: TZ
#          value: Asia/Shanghai
#        lifecycle:
#          postStart:
#            exec:
#              command:
#              - /bin/bash
#              - -c
#              - |
#                while [ ! -f /var/run/mysqld/mysqld.pid ]; do
#                  sleep 1
#                done

      # - name: sync-memcached
      #   image: memcached:1.6
      #   imagePullPolicy: IfNotPresent
      #   ports:
      #   - containerPort: 11211
      #     protocol: TCP
      #   command:
      #   - "memcached"
      #   - "-m"
      #   - "128"
      #   livenessProbe:
      #     initialDelaySeconds: 3
      #     tcpSocket:
      #       port: 11211
      
#      - name: sync-server
#        image: lovehunter9/seafile_server_test:test_ci
#        imagePullPolicy: IfNotPresent
#        volumeMounts:
#        - name: sync-data
#          mountPath: /shared
#        ports:
#        - containerPort: 8082
#          protocol: TCP
#
#      - name: sync-frontend
#        image: lovehunter9/seahub_frontend_test:test_ci
#        imagePullPolicy: IfNotPresent
#        ports:
#        - containerPort: 3000
#          protocol: TCP

      - name: sync-backend
        image: beclab/seahub_pgserver:v0.0.12
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: sync-data
          mountPath: /shared
        - name: seafile-data
          mountPath: /root/dev/seafile-data
        - name: seafile-nginx-conf
          mountPath: /root/dev/seafile-data/seafile.conf
          subPath: seafile.conf
        - name: seafile-nginx-conf
          mountPath: /root/dev/conf/ccnet.conf
          subPath: ccnet.conf
        - name: seafile-nginx-conf
          mountPath: /root/dev/conf/seahub_settings.py
          subPath: seahub_settings.py
        ports:
        - containerPort: 8000
          protocol: TCP
        - containerPort: 8082
          protocol: TCP
        env:
        - name: DB_HOST
          value: citus-headless.os-system
        - name: DB_PORT
          value: '5432'
        - name: DB_NAME1
          value: os_system_ccnet
        - name: DB_NAME2
          value: os_system_seafile
        - name: DB_NAME3
          value: os_system_seahub
        - name: DB_USER
          value: seafile_os_system
        - name: DB_PASSWORD
          value: {{ $pg_password | b64dec }}
        - name: PYTHONPATH
          value: /usr/local/lib/python3.8/site-packages/:/root/dev/source-code/seahub/thirdpart
        - name: CCNET_CONF_DIR
          value: /root/dev/conf
        - name: SEAFILE_CONF_DIR
          value: /root/dev/seafile-data
        - name: SEAFILE_CENTRAL_CONF_DIR
          value: /root/dev/conf
        - name: SEAFILE_ADMIN_EMAIL
          value: admin@bytetrade.io 
        - name: SEAFILE_ADMIN_PASSWORD
          value: admin
        - name: SEAFILE_SERVER_LETSENCRYPT
          value: "false"

      - name: nginx
        image: 'beclab/nginx-lua:n0.0.4'
        ports:
          - name: nginx-port
            containerPort: 80
            protocol: TCP
        volumeMounts:
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/proxy.conf
            subPath: proxy.conf
          - name: seafile-nginx-conf
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
#          - name: seafile-nginx-conf
#            mountPath: /etc/nginx/login.lua
#            subPath: login.lua
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        imagePullPolicy: IfNotPresent

      volumes:
      - name: seafile-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ $seafile_application_rootpath }}/data
      - name: sync-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ $seafile_application_rootpath }}
      - name: db-data
        hostPath:
          type: DirectoryOrCreate
          path: {{ $seafile_appcache_rootpath }}/db
      - name: seafile-nginx-conf
        configMap:
          name: seafile-nginx-conf
          items:
            - key: nginx.conf
              path: nginx.conf
            - key: proxy.conf
              path: proxy.conf
            - key: default.conf
              path: default.conf
#            - key: login.lua
#              path: login.lua
            - key: seafile.conf
              path: seafile.conf
            - key: ccnet.conf
              path: ccnet.conf
            - key: seahub_settings.py
              path: seahub_settings.py
          defaultMode: 420
      # - name: sync-config
      #   configMap:
      #     defaultMode: 420
      #     name: sync-config
      #     items:
      #     - key: seafdav.conf
      #       path: seafdav.conf

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: seafile-user-create-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.create
  callback: http://seafile.{{ .Release.Namespace }}:8000/callback/create

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: SysEventRegistry
metadata:
  name: seafile-user-delete-cb
  namespace: {{ .Release.Namespace }}
spec:
  type: subscriber
  event: user.delete
  callback: http://seafile.{{ .Release.Namespace }}:8000/callback/delete
