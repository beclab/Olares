{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $studio_secret := (lookup "v1" "Secret" $namespace "studio-secrets") -}}

{{- $pg_password := "" -}}
{{ if $studio_secret -}}
{{ $pg_password = (index $studio_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: studio-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: studio-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: studio
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: studio_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: studio-secrets
    databases:
      - name: studio
---
apiVersion: v1
kind: Service
metadata:
  name: studio-server
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: studio-server
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8088
      name: http
    - protocol: TCP
      port: 8083
      targetPort: 8083
      name: https

---
kind: Service
apiVersion: v1
metadata:
  name: chartmuseum-studio
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8888
  selector:
    app: studio-server

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: studio-san-cnf
  namespace: {{ .Release.Namespace }}
data:
  san.cnf: |
    [req]
    distinguished_name = req_distinguished_name
    req_extensions = v3_req
    prompt = no

    [req_distinguished_name]
    countryName = CN
    stateOrProvinceName = Beijing
    localityName = Beijing
    0.organizationName = bytetrade
    commonName = studio-server.{{ .Release.Namespace }}.svc

    [v3_req]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @bytetrade

    [bytetrade]
    DNS.1 = studio-server.{{ .Release.Namespace }}.svc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: studio-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: studio-server
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: studio-server
  template:
    metadata:
      labels:
        app: studio-server
    spec:
      serviceAccountName: bytetrade-controller
      volumes:
        - name: chart
          hostPath:
            type: DirectoryOrCreate
            path: '{{ .Values.userspace.appData}}/studio/Chart'
        - name: data
          hostPath:
            type: DirectoryOrCreate
            path: '{{ .Values.userspace.appData }}/studio/Data'
        - name: storage-volume
          hostPath:
            path: '{{ .Values.userspace.appData }}/studio/helm-repo-dev'
            type: DirectoryOrCreate
        - name: config-san
          configMap:
            name: studio-san-cnf
            items:
              - key: san.cnf
                path: san.cnf
        - name: certs
          emptyDir: {}
      initContainers:
        - name: init-chmod-data
          image: busybox:1.28
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - '-c'
            - |
              chown -R 1000:1000 /home/coder
              chown -R 65532:65532 /charts
              chown -R 65532:65532 /data
          securityContext:
            runAsUser: 0
          resources: { }
          volumeMounts:
            - name: storage-volume
              mountPath: /home/coder
            - name: chart
              mountPath: /charts
            - name: data
              mountPath: /data
        - name: generate-certs
          image: beclab/openssl:v3
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              openssl genrsa -out /etc/certs/ca.key 2048
              openssl req -new -x509 -days 3650 -key /etc/certs/ca.key -out /etc/certs/ca.crt \
                -subj "/CN=bytetrade CA/O=bytetrade/C=CN"
              openssl req -new -newkey rsa:2048 -nodes \
                -keyout /etc/certs/server.key -out /etc/certs/server.csr \
                -config /etc/san/san.cnf
              openssl x509 -req -days 3650 -in /etc/certs/server.csr \
                -CA /etc/certs/ca.crt -CAkey /etc/certs/ca.key \
                -CAcreateserial -out /etc/certs/server.crt \
                -extensions v3_req -extfile /etc/san/san.cnf
              chown -R 65532 /etc/certs/*
          volumeMounts:
            - name: config-san
              mountPath: /etc/san
            - name: certs
              mountPath: /etc/certs

      containers:
        - name: studio
          image: beclab/studio-server:v0.1.50
          imagePullPolicy: IfNotPresent
          args:
            - server
          ports:
            - name: port
              containerPort: 8088
              protocol: TCP
            - name: ssl-port
              containerPort: 8083
              protocol: TCP
          volumeMounts:
            - name: chart
              mountPath: /charts
            - name: data
              mountPath: /data
            - mountPath: /etc/certs
              name: certs
          lifecycle:
            preStop:
              exec:
                command:
                  - "/studio"
                  - "clean"
          env:
            - name: BASE_DIR
              value: /charts
            - name: OS_API_KEY
              value: {{ .Values.os.studio.appKey }}
            - name: OS_API_SECRET
              value: {{ .Values.os.studio.appSecret }}
            - name: OS_SYSTEM_SERVER
              value: system-server.user-system-{{ .Values.bfl.username }}
            - name: NAME_SPACE
              value: {{ .Release.Namespace }}
            - name: OWNER
              value: '{{ .Values.bfl.username }}'
            - name: DB_HOST
              value: citus-master-svc.user-system-{{ .Values.bfl.username }}
            - name: DB_USERNAME
              value: studio_{{ .Values.bfl.username }}
            - name: DB_PASSWORD
              value: "{{ $pg_password | b64dec }}"
            - name: DB_NAME
              value: user_space_{{ .Values.bfl.username }}_studio
            - name: DB_PORT
              value: "5432"
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 1000Mi
        - name: chartmuseum
          image: aboveos/helm-chartmuseum:v0.15.0
          args:
            - '--port=8888'
            - '--storage-local-rootdir=/storage'
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          env:
            - name: CHART_POST_FORM_FIELD_NAME
              value: chart
            - name: DISABLE_API
              value: 'false'
            - name: LOG_JSON
              value: 'true'
            - name: PROV_POST_FORM_FIELD_NAME
              value: prov
            - name: STORAGE
              value: local
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: 1000m
              memory: 512Mi
          volumeMounts:
            - name: storage-volume
              mountPath: /storage
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3