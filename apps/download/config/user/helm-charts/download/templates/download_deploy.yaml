{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $download_secret := (lookup "v1" "Secret" $namespace "rss-secrets") -}}

{{- $pg_password := "" -}}
{{ if $download_secret -}}
{{ $pg_password = (index $download_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password := "" -}}
{{ if $download_secret -}}
{{ $redis_password = (index $download_secret "data" "redis_password") }}
{{ else -}}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $download_nats_secret := (lookup "v1" "Secret" $namespace "download-secrets") -}}
{{- $nat_password := "" -}}
{{ if $download_nats_secret -}}
{{ $nat_password = (index $download_nats_secret "data" "nat_password") }}
{{ else -}}
{{ $nat_password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: download-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
  redis_password: {{ $redis_password }}
  nat_password: {{ $nat_password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: download-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: download
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: knowledge_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: download-secrets
    databases:
    - name: knowledge
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: download-nat
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: download
  appNamespace: {{ .Release.Namespace }}
  middleware: nats
  nats:
    password:
      valueFrom:
        secretKeyRef:
          key: nat_password
          name: download-secrets
    refs: []
    subjects:
    - name: download_status
      permission:
        pub: allow
        sub: allow
      export:
      - appName: knowledge
        sub: allow
        pub: allow
    user: user-system-{{ .Values.bfl.username }}-download
---


apiVersion: apps/v1
kind: Deployment
metadata:
  name: download
  namespace: {{ .Release.Namespace }}
  labels:
    app: download
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: download
  template:
    metadata:
      labels:
        app: download
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000

      initContainers:
      - name: init-data
        image: busybox:1.28
        securityContext:
          privileged: true
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: config-dir
          mountPath: /config
        - name: download-dir
          mountPath: /downloads
        command:
        - sh
        - -c
        - |
          chown -R 1000:1000 /config && \
          chown -R 1000:1000 /downloads
      - name: init-container
        image: 'postgres:16.0-alpine3.18'
        command:
          - sh
          - '-c'
          - >-
            echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB -c "SELECT 1"; do sleep 1; printf "-"; done; sleep 5; echo -e " >> PostgreSQL DB Server has started";
        env:
          - name: PGHOST
            value: citus-master-svc.user-system-{{ .Values.bfl.username }}
          - name: PGPORT
            value: "5432"
          - name: PGUSER
            value: knowledge_{{ .Values.bfl.username }}
          - name: PGPASSWORD
            value: {{ $pg_password | b64dec }}
          - name: PGDB
            value: user_space_{{ .Values.bfl.username }}_knowledge
      containers:
      - name: aria2
        image: "beclab/aria2:v0.0.1"
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        ports:
        - containerPort: 6800
        - containerPort: 6888
        env:
        - name: RPC_SECRET
          value: kubespider
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        volumeMounts:
        - name: download-dir
          mountPath: /downloads
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: "1"
            memory: 300Mi
      - name: yt-dlp
        image: "beclab/yt-dlp:v0.0.12"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000

        ports:
        - containerPort: 3082
        env:
        - name: PG_USERNAME
          value: knowledge_{{ .Values.bfl.username }}
        - name: PG_PASSWORD
          value: {{ $pg_password | b64dec }}
        - name: PG_HOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PG_PORT
          value: "5432"
        - name: PG_DATABASE
          value: user_space_{{ .Values.bfl.username }}_knowledge
        - name: SETTING_URL
          value: http://system-server.user-system-{{ .Values.bfl.username }}/legacy/v1alpha1/service.settings/v1/api/cookie/retrieve
        - name: REDIS_HOST
          value: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
        - name: REDIS_PASSWORD
          value: {{ $redis_password | b64dec }}
        - name: NATS_HOST
          value: nats.user-system-{{ .Values.bfl.username }}
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: user-system-{{ .Values.bfl.username }}-download
        - name: NATS_PASSWORD
          value: {{ $nat_password | b64dec }}
        - name: NATS_SUBJECT
          value: "terminus.{{ .Release.Namespace }}.download_status"
        volumeMounts:
        - name: config-dir
          mountPath: /app/config
        - name: download-dir
          mountPath: /app/downloads
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: "1"
            memory: 300Mi
      - name: download-spider
        image: "beclab/download-spider:v0.0.12"
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000

        env:
        - name: PG_USERNAME
          value: knowledge_{{ .Values.bfl.username }}
        - name: PG_PASSWORD
          value: {{ $pg_password | b64dec }}
        - name: PG_HOST
          value: citus-master-svc.user-system-{{ .Values.bfl.username }}
        - name: PG_PORT
          value: "5432"
        - name: PG_DATABASE
          value: user_space_{{ .Values.bfl.username }}_knowledge
        - name: REDIS_HOST
          value: redis-cluster-proxy.user-system-{{ .Values.bfl.username }}
        - name: REDIS_PASSWORD
          value: {{ $redis_password | b64dec }}
        - name: NATS_HOST
          value: nats.user-system-{{ .Values.bfl.username }}
        - name: NATS_PORT
          value: "4222"
        - name: NATS_USERNAME
          value: user-system-{{ .Values.bfl.username }}-download
        - name: NATS_PASSWORD
          value: {{ $nat_password | b64dec }}
        - name: NATS_SUBJECT
          value: "terminus.{{ .Release.Namespace }}.download_status"
        volumeMounts:
        - name: download-dir
          mountPath: /downloads
        
        ports:
        - containerPort: 3080
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: "1"
            memory: 300Mi

      volumes:
      - name: config-dir
        hostPath: 
          type: DirectoryOrCreate
          path: {{ .Values.userspace.appData}}/Downloads/config
      - name: download-dir
        hostPath:
          type: DirectoryOrCreate
          path: {{ .Values.userspace.userData }}


---
apiVersion: v1
kind: Service
metadata:
  name: download-svc
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: download
  ports:
    - name: "download-spider"
      protocol: TCP
      port: 3080
      targetPort: 3080
    - name: "aria2-server"
      protocol: TCP
      port: 6800
      targetPort: 6800
    - name: ytdlp-server
      protocol: TCP
      port: 3082
      targetPort: 3082

---
apiVersion: v1
kind: Service
metadata:
  name: download-api
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  type: ClusterIP
  selector:
    app: systemserver
  ports:
    - protocol: TCP
      name: download-api
      port: 3080
      targetPort: 3080  


