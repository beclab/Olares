

{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $notifications_secret := (lookup "v1" "Secret" $namespace "notifications-secrets") -}}
{{- $password := "" -}}
{{ if $notifications_secret -}}
{{ $password = (index $notifications_secret "data" "pg_password") }}
{{ else -}}
{{ $password = randAlphaNum 16 | b64enc }}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: notifications-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $password }}
---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: notifications-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: notifications
  appNamespace: {{ .Release.Namespace }}
  middleware: postgres
  postgreSQL:
    user: notifications_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: notifications-secrets
    databases:
    - name: notifications   

{{ if (eq .Values.debugVersion true) }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: notifications
    applications.app.bytetrade.io/author: bytetrade.io

    applications.app.bytetrade.io/name: notifications
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
  annotations:
    applications.app.bytetrade.io/icon: https://file.bttcdn.com/appstore/notifications/icon.png
    applications.app.bytetrade.io/title: Notifications
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/entrances: '[{"name":"notifications", "host":"notifications-service", "port":80,"title":"Notifications"}]'
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: notifications
  template:
    metadata:
      labels:
        app: notifications
    spec:
      initContainers:
      - name: terminus-sidecar-init
        image: openservicemesh/init:v1.2.3
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities: 
            add:
            - NET_ADMIN
          runAsNonRoot: false
          runAsUser: 0
        command:
        - /bin/sh
        - -c
        - |
          iptables-restore --noflush <<EOF
          # sidecar interception rules
          *nat
          :PROXY_IN_REDIRECT - [0:0]
          :PROXY_INBOUND - [0:0]
          -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
          -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
          -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
          -A PREROUTING -p tcp -j PROXY_INBOUND
          COMMIT
          EOF
        
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
      containers:
      - name: notifications-frontend
        image: beclab/notifications-frontend:v0.1.22
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
      - name: terminus-envoy-sidecar
        image: bytetrade/envoy:v1.25.11
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsUser: 1000
        ports:
        - name: proxy-admin
          containerPort: 15000
        - name: proxy-inbound
          containerPort: 15003
        volumeMounts:
        - name: terminus-sidecar-config
          readOnly: true
          mountPath: /etc/envoy/envoy.yaml
          subPath: envoy.yaml
        command:
        - /usr/local/bin/envoy
        - --log-level
        - debug
        - -c
        - /etc/envoy/envoy.yaml
        env:
        - name: POD_UID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      volumes:
      - name: terminus-sidecar-config
        configMap:
          name: sidecar-configs
          items:
          - key: envoy.yaml
            path: envoy.yaml
        # - name: REDIS_HOST
        #   value: localhost
        # - name: REDIS_PORT
        #   value: "6379"
      # - name: notifications-worker
      #   image: aboveos/notifications-worker:v0.1.2
      #   imagePullPolicy: IfNotPresent
      #   env:
      #   - name: MONGO_URL
      #     value: mongodb://admin:123456@localhost:27017
      #   - name: REDIS_HOST
      #     value: localhost
      #   - name: REDIS_CACHE_SERVICE_HOST
      #     value: localhost
      #   - name: REDIS_PORT
      #     value: "6379"
      # - name: mongodb
      #   image: mongo:4.4.5
      #   env:
      #   - name: MONGO_INITDB_ROOT_USERNAME
      #     value: admin
      #   - name: MONGO_INITDB_ROOT_PASSWORD
      #     value: '123456'
      #   imagePullPolicy: IfNotPresent
      #   ports:
      #   - containerPort: 27017
      #   volumeMounts:
      #   - name: mongo-data
      #     mountPath: /data/db
      # - name: redis
      #   image: redis:7.0.5-alpine3.16
      #   imagePullPolicy: IfNotPresent
      #   volumeMounts:
      #   - name: redis-data
      #     mountPath: /data
      # volumes:
      # - name: mongo-data
      #   hostPath:
      #     type: DirectoryOrCreate
      #     path: {{ .Values.userspace.appCache}}/notification/db
      # - name: redis-data
      #   hostPath:
      #     type: DirectoryOrCreate
      #     path: {{ .Values.userspace.appCache}}/notification/redisdata
{{ end }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notifications-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: notifications-server
    applications.app.bytetrade.io/author: bytetrade.io
  annotations:
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: notifications-server
  template:
    metadata:
      labels:
        app: notifications-server
    spec:
      containers:
      - name: notifications-api
        image: beclab/notifications-api:v0.1.22
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3010
          protocol: TCP
        env:
        - name: OS_SYSTEM_SERVER
          value: system-server.user-system-{{ .Values.bfl.username }}
        - name: OS_APP_SECRET
          value: '{{ .Values.os.notification.appSecret }}'
        - name: OS_APP_KEY
          value: {{ .Values.os.notification.appKey }}
        - name: DATABASE_PASSWORD
          value: {{ $password | b64dec }}
        - name: DATABASE_URL
          value: postgres://notifications_{{ .Values.bfl.username }}:$(DATABASE_PASSWORD)@citus-master-svc.user-system-{{ .Values.bfl.username }}/user_space_{{ .Values.bfl.username }}_notifications?sslmode=disable

---
apiVersion: v1
kind: Service
metadata:
  name: notifications-service
  namespace: {{ .Release.Namespace }}
{{ if (eq .Values.debugVersion true) }}
spec:
  type: ClusterIP
  selector:
    app: notifications
  ports:
  - name: "notifications-frontend"
    protocol: TCP
    port: 80
    targetPort: 80
{{ else }}    
spec:
  type: ClusterIP
  selector:
    app: notifications-server
  ports:
  - name: "notifications-server"
    protocol: TCP
    port: 80
    targetPort: 3010
{{ end }}

---
apiVersion: v1
kind: Service
metadata:
  name: notifications-server
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  selector:
    app: notifications-server
  ports:
  - name: "server"
    protocol: TCP
    port: 80
    targetPort: 3010

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: notifications-token-provider
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: token
  deployment: notifications-server
  description: notifications provider
  endpoint: notifications-server.{{ .Release.Namespace }}
  group: service.notification
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: Create
    uri: /termipass/create_token
  version: v1
status:
  state: active
 
---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: notifications-message-provider
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: message
  deployment: notifications-server
  description: notifications provider
  endpoint: notifications-server.{{ .Release.Namespace }}
  group: service.notification
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: SendMassage
    uri: /notification/create_job
  - name: SystemMessage
    uri: /notification/system/push
  version: v1
status:
  state: active

---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ApplicationPermission
metadata:
  name: notification-call-vault
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: notifications
  appid: notifications
  key: {{ .Values.os.notification.appKey }}
  secret: {{ .Values.os.notification.appSecret }}
  permissions:
  - dataType: notification
    group: service.vault
    ops:
    - Create
    - Query
    version: v1
  - dataType: notification
    group: service.desktop
    ops:
    - Create
    - Query
    version: v1
  - dataType: secret
    group: secret.infisical
    ops:
    - RetrieveSecret?workspace=notification
    - CreateSecret?workspace=notification
    - DeleteSecret?workspace=notification
    - UpdateSecret?workspace=notification
    - ListSecret?workspace=notification
    version: v1
  - dataType: app
    group: service.bfl
    ops:
    - UserApps
    version: v1
status:
  state: active
