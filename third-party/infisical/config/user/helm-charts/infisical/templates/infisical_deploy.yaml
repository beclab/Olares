
{{- $mongo_secret := (lookup "v1" "Secret" .Release.Namespace "infisical-mongodb") -}}
{{- $backend_secret := (lookup "v1" "Secret" .Release.Namespace "infisical-backend") -}}
{{- $mongo_password := randAlphaNum 16 | b64enc -}}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Namespace }}:vault-role
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - "*"
  resources:
  - secrets
  verbs:
  - get
  - list

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: user-system-{{ .Values.bfl.username }}:vault-role:app
  namespace: user-system-{{ .Values.bfl.username }}
rules:
- apiGroups:
  - "*"
  resources:
  - applicationpermissions
  verbs:
  - get
  - list
  
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: infisical-sa
  namespace: {{ .Release.Namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Namespace }}:vault-rb
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }} 
    name: infisical-sa
roleRef:
  kind: Role
  name: {{ .Release.Namespace }}:vault-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: user-system-{{ .Values.bfl.username }}:vault-rb:app
  namespace: user-system-{{ .Values.bfl.username }}
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }} 
    name: infisical-sa
roleRef:
  kind: Role
  name: user-system-{{ .Values.bfl.username }}:vault-role:app
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Namespace }}:vault-ro-user-rb
subjects:
  - kind: ServiceAccount
    namespace: {{ .Release.Namespace }} 
    name: infisical-sa
roleRef:
  kind: ClusterRole
  name: tapr-images-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-mongodb
  namespace: {{ .Release.Namespace }}
type: Opaque

{{ if $mongo_secret -}}
data:
  mongodb-passwords: {{ index $mongo_secret "data" "mongodb-passwords" }}
{{ else -}}
data:
  mongodb-passwords: {{ $mongo_password }}
{{ end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-mongodb
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque

{{ if $mongo_secret -}}
data:
  mongodb-passwords: {{ index $mongo_secret "data" "mongodb-passwords" }}
{{ else -}}
data:
  mongodb-passwords: {{ $mongo_password }}
{{ end }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: infisical-mongo
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: infisical
  appNamespace: {{ .Release.Namespace }}
  middleware: mongodb
  mongodb:
    user: infisical-{{ .Values.bfl.username }}
    password: 
      valueFrom:
        secretKeyRef:
          key: mongodb-passwords
          name: infisical-mongodb
    databases:
    - name: infisical

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: infisical-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: infisical
    applications.app.bytetrade.io/author: bytetrade.io

{{ if (eq .Values.debugVersion true) }}
    applications.app.bytetrade.io/name: infisical
    applications.app.bytetrade.io/owner: '{{ .Values.bfl.username }}'
  annotations:
    applications.app.bytetrade.io/icon: https://bookface-images.s3.amazonaws.com/small_logos/621cb43ec50d1aae545391abcc114014c84d295f.png
    applications.app.bytetrade.io/title: Infisical
    applications.app.bytetrade.io/version: '0.0.1'
    applications.app.bytetrade.io/entrances: '[{"name":"infisical", "host":"infisical-service", "port":80,"title":"Infisical"}]'
{{ end }}    

spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: infisical
  template:
    metadata:
      labels:
        app: infisical
    spec:
      serviceAccountName: infisical-sa
      containers:
      - name: infisical
        image: "infisical/backend:v0.3.8"
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /api/status
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 10
        ports:
        - containerPort: 4000
        envFrom:
        - secretRef:
            name: infisical-backend
        env:
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-mongodb
              key: mongodb-passwords
        - name: MONGO_URL
          value: "mongodb://infisical-{{ .Values.bfl.username }}:$(MONGODB_PASSWORD)@mongo-cluster-mongos.user-system-{{ .Values.bfl.username }}:27017/{{ .Release.Namespace }}_infisical"

{{ if (eq .Values.debugVersion true) }}
      - name: infisical-frontend
        image: beclab/infisical-frontend:0.1.0
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        envFrom:
        - secretRef:
            name: infisical-frontend
        ports:
        - containerPort: 3000
{{ end }}    

      - name: infisical-proxy
        image: nginx:stable-alpine3.17-slim
        imagePullPolicy: IfNotPresent
        ports:
        - name: proxy
          containerPort: 8088
        volumeMounts:
        - name: nginx-config
          readOnly: true
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf

      - name: tapr-sidecar
        image: beclab/secret-vault:0.1.5
        imagePullPolicy: IfNotPresent
        ports:
        - name: proxy
          containerPort: 8080
        env:
        - name: OWNER
          value: '{{ .Values.bfl.username }}'
        - name: MONGO_USER
          value: infisical-{{ .Values.bfl.username }}
        - name: MONGO_DB
          value: {{ .Release.Namespace }}_infisical
        - name: MONGO_ADDR
          value: mongo-cluster-mongos.user-system-{{ .Values.bfl.username }}:27017
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: infisical-backend
              key: SECRET_KEY

      volumes:
      - name: nginx-config
        configMap:
          name: infisical-nginx-conf
          items:
          - key: nginx.conf
            path: nginx.conf
   

---
apiVersion: v1
kind: Service
metadata:
  name: infisical-service
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: infisical
  type: ClusterIP
  ports:
  - protocol: TCP
    name: infisical
    port: 80
    targetPort: 8088
  - protocol: TCP
    name: sidecar
    port: 8080
    targetPort: 8080




---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-backend
  namespace: {{ .Release.Namespace }}
type: Opaque
{{ if $backend_secret -}}
data:
  ENCRYPTION_KEY: {{ $backend_secret.data.ENCRYPTION_KEY }}
  #INVITE_ONLY_SIGNUP: {{ $backend_secret.data.INVITE_ONLY_SIGNUP }}
  JWT_AUTH_SECRET: {{ $backend_secret.data.JWT_AUTH_SECRET }}
  JWT_MFA_SECRET: {{ $backend_secret.data.JWT_MFA_SECRET }}
  JWT_REFRESH_SECRET: {{ $backend_secret.data.JWT_REFRESH_SECRET }}
  JWT_SERVICE_SECRET: {{ $backend_secret.data.JWT_SERVICE_SECRET }}
  JWT_SIGNUP_SECRET: {{ $backend_secret.data.JWT_SIGNUP_SECRET }}
  SITE_URL: {{ $backend_secret.data.SITE_URL }}
  #SMTP_FROM_ADDRESS: {{ $backend_secret.data.SMTP_FROM_ADDRESS }}
  SMTP_FROM_NAME: {{ $backend_secret.data.SMTP_FROM_NAME }}
  #SMTP_HOST: {{ $backend_secret.data.SMTP_HOST }}
  #SMTP_PASSWORD: {{ $backend_secret.data.SMTP_PASSWORD }}
  SMTP_PORT: {{ $backend_secret.data.SMTP_PORT }}
  #SMTP_SECURE: {{ $backend_secret.data.SMTP_SECURE }}
  #SMTP_USERNAME: {{ $backend_secret.data.SMTP_USERNAME }}
  SECRET_KEY: {{ $backend_secret.data.SECRET_KEY }}
{{ else -}}
stringData:
  ENCRYPTION_KEY: "b318446cc6cd8ac7159ccc8245b32be5"
  #INVITE_ONLY_SIGNUP: ""
  JWT_AUTH_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_MFA_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_REFRESH_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_SERVICE_SECRET: {{ randAlphaNum 32 | lower }}
  JWT_SIGNUP_SECRET: {{ randAlphaNum 32 | lower }}
  SITE_URL: "infisical.local"
  #SMTP_FROM_ADDRESS: ""
  SMTP_FROM_NAME: "Infisical"
  #SMTP_HOST: ""
  #SMTP_PASSWORD: ""
  SMTP_PORT: "587"
  #SMTP_SECURE: ""
  #SMTP_USERNAME: ""
  SECRET_KEY: {{ randAlphaNum 32 | lower }}

{{ end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: infisical-frontend
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  SITE_URL: "infisical.local"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: infisical-nginx-conf
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |
    worker_processes 2;
    events {}
    http {
        server {
            listen 8088;

            location /api {
                proxy_set_header X-Real-RIP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_pass http://localhost:4000; # for backend
                proxy_redirect off;

                # proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
                proxy_cookie_path / "/; HttpOnly; SameSite=strict";
            }

            location /tapr {
                proxy_set_header X-Real-RIP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_pass http://localhost:8080; # for tapr
                proxy_redirect off;

                # proxy_cookie_path / "/; secure; HttpOnly; SameSite=strict";
                proxy_cookie_path / "/; HttpOnly; SameSite=strict";
            }

            location / {
                include /etc/nginx/mime.types;

{{ if (eq .Values.debugVersion true) }}
                proxy_set_header X-Real-RIP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;

                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";

                proxy_pass http://localhost:3000; # for frontend
                proxy_redirect off;
{{ end }}    
            }
        }
    }


---
apiVersion: sys.bytetrade.io/v1alpha1
kind: ProviderRegistry
metadata:
  name: secret-provider
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  dataType: secret
  deployment: infisical-deployment
  description: infisical secret provider
  endpoint: infisical-service.{{ .Release.Namespace }}:8080
  group: secret.infisical
  kind: provider
  namespace: {{ .Release.Namespace }}
  opApis:
  - name: CreateSecret
    uri: /secret/create
  - name: RetrieveSecret
    uri: /secret/retrieve
  - name: ListSecret
    uri: /secret/list
  - name: DeleteSecret
    uri: /secret/delete
  - name: UpdateSecret
    uri: /secret/update
  version: v1
status:
  state: active